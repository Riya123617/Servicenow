<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="test9">f67b52ec972c951027f8fbc71153af13</cat_item>
        <cat_variable>IO:9f7b92ec972c951027f8fbc71153af52</cat_variable>
        <condition/>
        <description>This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.</description>
        <field/>
        <global>true</global>
        <isolate_script>false</isolate_script>
        <messages/>
        <name>Check Catalog Item Validity project</name>
        <order>1</order>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } g_form.setReadOnly('default_endpoint', false); var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { var selectedEndpointList; var allEndpointList; portal_check = response; if (portal_check == 'false') { var loadingHTML = "<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'></div></div>"; var projectUUID = (newValue + '').trim(); if (projectUUID == '') return; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Project Status...'); loadingDialog.renderWithContent('' + loadingHTML); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('onChangeType', 'project'); ga.addParam('sysparm_projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = ''; if (parsed[index].state == 'INACTIVE') { message = parsed[index].name + ' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. '; alert(message); self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; } else if (parsed[index].state == 'CANTCHECK') { message = ' Cant check whether the ' + parsed[index].name + ' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; alert(message); self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; } } new GlideModal().get('loader').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].label == "Project" && flds[i].prettyName == "default_project") continue; if (flds[i].label == "Profile" && flds[i].prettyName == "default_profile") continue; if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } } function getParameterValue(name) { name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]"); var regexS = "[\\?&]" + name + "=([^&#]*)"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return ""; } else { return unescape(results[1]); } } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchSelectedEndpointList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchEndpointAssociatedToProject'); ga.addParam('sysparm_projectID', newValue); ga.addParam('sysparm_selected_endpoint', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log("Endpoint associated to new project ::" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions('default_endpoint'); for (var i = 0; i < final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption('default_endpoint', endpoint.uuid + '', endpoint.name + ''); console.log("endpoint ::" + endpoint.uuid); if (endpoint.uuid == "") { g_form.showFieldMsg('default_endpoint', 'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.'); } } if (final_endpointList.length == 1) { g_form.setReadOnly('default_endpoint', true); } } } } else { var projectUUID = (newValue + '').trim(); if (projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('onChangeType', 'project'); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = ''; if (parsed[index].state == 'INACTIVE') { message = parsed[index].name + ' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. '; alert(message); self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; } else if (parsed[index].state == 'CANTCHECK') { message = ' Cant check whether the ' + parsed[index].name + ' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; alert(message); self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; } } } function getParameterValue(name) { name = name.replace(/[\\[]/, "\\\\\\[").replace(/[\\]]/, "\\\\\\]"); var regexS = "[\\\\?&]" + name + "=([^&#]*)"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return ""; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails'); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.addParam('fieldNameArray', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == 'formatter' || object[i].var_type == 'container' || object[i].var_type == 'checkbox_container' || object[i].var_type == 'undefined' || object[i].var_type == 'Container Start') { continue; } if (object[i].var_name.indexOf('cluster_name') == -1) g_form.clearValue(object[i].var_name); } } self.location = '/sp?id=sc_category&catalog_id=240abede37112300fdfc097973990e24'; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchSelectedEndpointList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchEndpointAssociatedToProject'); ga.addParam('sysparm_projectID', newValue); ga.addParam('sysparm_selected_endpoint', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log("Endpoint assciated to new project ::" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions('default_endpoint'); for (var i = 0; i < final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption('default_endpoint', endpoint.uuid + '', endpoint.name + ''); console.log("endpoint ::" + endpoint.uuid); if (endpoint.uuid == "") { g_form.showFieldMsg('default_endpoint', 'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.'); } } if (final_endpointList.length == 1) { g_form.setReadOnly('default_endpoint', true); } } } } } }]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2022-07-04 13:01:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>cc8bd2ec972c951027f8fbc71153af78</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Check Catalog Item Validity project</sys_name>
        <sys_overrides/>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>catalog_script_client_cc8bd2ec972c951027f8fbc71153af78</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2022-07-04 13:01:58</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
