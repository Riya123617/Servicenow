<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_nuta2_nutanix_ca.Migration_Script</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>Migration_Script</name>
        <script><![CDATA[var Migration_Script = Class.create();
Migration_Script.prototype = {
    initialize: function() {
        this.appUtil = new Nutanix_Calm_Utils();
        this.logger = new Nutanix_Calm_Logger();
        this.createVariable = new Nutanix_CreateCatalogVariables();
        this.appScriptInstance = new Nutanix_ImportApplicationProfiles();
		this.protected_var = 'protected';
    },
	
    checkForTheRuntimeConfigurationsCatalogItems: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() && (gs.getProperty('x_nuta2_nutanix_ca.1_4_5') == '0')) {
                this.logger.info("Migration to V 1_4_5 require");
                return true;
            }
            this.logger.info("Migration to V 1_4_5 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_4_5", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.checkForTheRuntimeConfigurationsCatalogItems() Error : - " + e);
        }
    },
    updateTheFetchOnChangeClientScripts: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            while (gr.next()) { //nameINFetch dependencies on change of profile,On Change of Environment variable
                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINFetch values OnChange,On Change of Environment variable,Fetch dependencies on change of profile,Fetch form data on change of profile,Hide Order details on request');
                catalogScriptGR.query();
                var catalogClientScript = new sn_sc.CatalogClientScript();
                var fieldList = [];
                var envFieldSysID;
                var profilesysID;
                var fetchformSysID;
                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'Fetch values OnChange' && fieldList.indexOf(field) == -1)
                        fieldList.push(field);
                    else if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch dependencies on change of profile')
                        profilesysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch form data on change of profile')
                        fetchformSysID = field;

                }
                var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (!sessionStorage['varValues']) return;var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + ''];if (isLoading || newValue == '' || oldValue + '' == newValue + '') {    new GlideModal().get('loader').destroy();return;}function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var var_array = [];for (var i in prof_json) {if (i + '' == control.id + '')continue;var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);varValues['IO:' + i] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = i + '', var_array.push(parsed_field);} getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {if (control.id + '' == k) {continue;}var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);varValues['IO:' + k] = curr_value + '';var parsed_field = JSON.parse(field);parsed_field.def_val = parsed_field.value + '';parsed_field.value = curr_value, parsed_field.sys_id = k + '', var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser'),gajax.addParam('sysparm_field', control.id +''), gajax.addParam('sysparm_type', 'catalog'), gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''),gajax.addParam('sysparm_varJson', act_var_JSON), gajax.getXML(getVarResponse);}function getVarResponse(response) { new GlideModal().get('loader').destroy();var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id;if (control.id + '' == sys_id) {continue;}var type = row.type + '';if (row.state == 'SUCCESS' && (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.clearOptions(sys_id); g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars'), ga.addParam('sysparm_catsysid', cat_sys_id), ga.addParam('sysparm_profile', profile), ga.getXML(varResponse, null, loadingDialog);}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "global");
                        grChange.update();
                    }
                }
                //environment..
                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "On Change of Environment variable",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + envFieldSysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i < g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i < answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();}}";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //Profile..

                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch dependencies on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + profilesysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_field', 'onLoad');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS' && (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET')) {g_form.clearOptions(sys_id);for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + '', row.value[k], row.value[k]);g_form.setValue(sys_id, row.value);} else {if (row.data_type + '' != 'BASE') {g_form.clearOptions(sys_id);for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);}g_form.setValue(sys_id, row.value);}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}new GlideModal().get('variables_loader').destroy(); }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //formDataDisplay

                var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                onChangecatalogClientScript.setAttributes({
                    "name": "Fetch form data on change of profile",
                    "type": "onChange",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "cat_variable": "IO:" + fetchformSysID,
                    "active": true,
                    "order": 1000,
                    "description": "This script is auto created thorugh runtime module for fetching values.",
                    "applies_catalog": "true",
                    "ui_type": "0",
                    "applies_req_item": false,
                    "applies_sc_task": false,
                });
                onChangecatalogClientScript.appliesToCatalogItem(true);
                var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading) { return; } try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { if (newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setValue(i + '', parsed[i].value+''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference && credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } } else { var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails'); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.addParam('fieldNameArray', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') { continue; } g_form.setDisplay(object1[i].var_type + '', false); g_form.setReadOnly(object1[i].var_type + '', true); } } g_form.setDisplay('provider_icons', 'true'); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (object1[i].var_type + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setValue(i + '', parsed[i].value+''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log('Inside onchange profile: ' + e.message); } }";
                onChangecatalogClientScript.addScript(onChangeScript);
                var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(OnChangeCatalogScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }

                //onload

                var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScriptGR.setAttributes({
                    "name": "Hide Order details on request",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "active": true,
                    "order": 10,
                    "description": "Hide values on request details.",
                    "applies_catalog": "false",
                    "ui_type": "0",
                    "applies_req_item": "true",
                    "applies_sc_task": "false"
                });
                onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setMandatory(flds[i].prettyName,false);g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "global");
                    grChange.update();
                }
            }
            gs.setProperty("x_nuta2_nutanix_ca.1_4_5", "1");
        } catch (e) {
            this.logger.error("Exception caugh inside Migration_script.updateTheFetchOnChangeClientScripts() Error : - " + e);
        }
    },

    updatedOneDotFiveDotOneMigrationNeeded: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() && (gs.getProperty('x_nuta2_nutanix_ca.1_5_1') == '0')) {
                this.logger.info("Migration to V 1_5_1 require");
                return true;
            }
            this.logger.info("Migration to V 1_5_1 not require");
            gs.setProperty("x_nuta2_nutanix_ca.1_5_1", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.isOneDotFiveOneMigrationNeeded() Error : - " + e);
        }
    },

    updateBpTypeForOneDotFive: function() {
        gs.info("Inside updateBpTypeForOneDotFive Function");
        var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
        gr.query();

        while (gr.next()) {
            if (gr.item_name.category.title + '' == 'Marketplace Blueprint') {
                gr.type_of_blueprint = 'published';
            } else if (gr.item_name.category.title + '' == 'Blueprint') {
                gr.type_of_blueprint = 'unpublished';
            }
            gr.update();
        }
    },
	
	updatedOneDotSixMigrationNeeded: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() && (gs.getProperty('x_nuta2_nutanix_ca.1_6') == '0')) {
                this.logger.info("Migration to V 1_6 require");
                return true;
            }
            this.logger.info("Migration to V 1_6 not require");
			gs.setProperty("x_nuta2_nutanix_ca.1_6", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.updatedOneDotSixMigrationNeeded() Error : - " + e);
        }
    },
	
	updateTheCatalogClientScriptForOneDotSix: function() {
        try {
			gs.info("migration triggered");
			var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();

            while (gr.next()) {
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.catItem + '');
                fieldGR.query();
				if (fieldGR.get(gr.item_name+'')) {
					fieldGR.state = "published";
					fieldGR.update();
				}
				
				var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINFetch values OnChange,Set Session Vars');
                catalogScriptGR.query();

                var catalogClientScript = new sn_sc.CatalogClientScript();
				var fieldList = [];
				var envFieldSysID;
				var onchangeproject;
				var setSessionVars;
				
				while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
					if (catalogScriptGR.name + '' == 'Fetch values OnChange' && fieldList.indexOf(field) == -1)
                        fieldList.push(field);
					else if (catalogScriptGR.name + '' == 'Set Session Vars')
                        setSessionVars = field;

                }
				
				 var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (!sessionStorage[\'varValues\']) return; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control.id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { new GlideModal().get(\'loader\').destroy(); return; } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { if (i + \'\' == control.id + \'\') continue; var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { if (control.id + \'\' == k) { continue; } var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control.id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', profile), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { new GlideModal().get(\'loader\').destroy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; if (control.id + \'\' == sys_id) { continue; } var type = row.type + \'\'; if (row.state == \'SUCCESS\' && (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); if(row.value!=\'undefined\') g_form.setValue(sys_id, row.value); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } if(row.value!=\'undefined\') g_form.setValue(sys_id, row.value); } if (row.state == \'ERROR\') { g_form.clearOptions(sys_id); g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse, null, loadingDialog); } else { try { if (!sessionStorage[\'varValues\']) return;var control_id =\'" + fieldList[fieldListLength] + "\'; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control_id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { return; } console.log(oldValue); console.log(newValue); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control_id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', profile), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' && (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); if(row.value[0]!=\'undefined\') g_form.setValue(sys_id, row.value[0]); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } if(row.value!=\'undefined\') g_form.setValue(sys_id, row.value); } row.state == \'ERROR\' && g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } var cat_sys_id = g_form.getUniqueValue(); if (g_form.getValue(\'default_profile\') != \'\') var profile = g_form.getValue(\'default_profile\').trim(); else var profile = \'runbook\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse); } catch (e) { console.log(\'Fetch values OnChange\' + e) } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                }
				
				try {
					if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript2.setAttributes({
                        "name": "Set Session Vars",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + setSessionVars,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for setting session json.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript2.appliesToCatalogItem(true);
                    var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; } for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; } } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } } else { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                    onChangecatalogClientScript2.addScript(onChangeScriptSess);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                }
					else {
					var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript2.setAttributes({
                        "name": "Set Session Vars",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for setting session json.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript2.appliesToCatalogItem(true);
                    var onChangeScriptSess = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', \'runbook\'); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } } getAdvancedVars(var_array); sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', \'runbook\'); gajax.addParam(\'sysparm_envsysid\', \'\'); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' && (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' && row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' && row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', \'runbook\'); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } } getAdvancedVars(var_array); sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', \'runbook\'); gajax.addParam(\'sysparm_envsysid\', \'\'); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' && (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' && row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' && row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                    onChangecatalogClientScript2.addScript(onChangeScriptSess);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
				}
				}
				catch (e) {
                    gs.info('Set Session Vars: ' + e.message);
				}
                
			}
			 gs.setProperty("x_nuta2_nutanix_ca.1_6", "1");
			this.logger.info("Migration to v1.6 is completed");
		}catch (e) {
            this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotSix() Error : - " + e);
        }
    },
	
	updatedOneDotFiveDotTwoMigrationNeeded: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();
            if (gr.hasNext() && (gs.getProperty('x_nuta2_nutanix_ca.1_5_2') == '0')) {
                this.logger.info("Migration to V 1_5_2 require");
                return true;
            }
            this.logger.info("Migration to V 1_5_2 not require");
			gs.setProperty("x_nuta2_nutanix_ca.1_5_2", "1");
            return false;
        } catch (e) {
            this.logger.error("Exception caught inside Migration_script.isOneDotFiveTwoMigrationNeeded() Error : - " + e);
        }
    },

	updateTheCatalogClientScriptForOneDotFiveDotTwo: function() {
        try {
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();

            while (gr.next()) {
                var fieldGR = new GlideRecord(this.appUtil.configuration.table.catItem + '');
                fieldGR.query();
				if (fieldGR.get(gr.item_name+'')) {
					fieldGR.state = "published";
					fieldGR.update();
				}
				
				var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINOn Change of Project,On Change of Environment variable');
                catalogScriptGR.query();

                var catalogClientScript = new sn_sc.CatalogClientScript();
				var envFieldSysID;
				var onchangeproject;
				
				while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'On Change of Project')
                        onchangeproject = field;

                }
				
				if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) >= parseFloat("3.2")) {
                    if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                        try {
                            var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                            onChangeCatalogProject.setAttributes({
                                "name": "On Change of Project",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name,
                                "cat_variable": "IO:" + onchangeproject,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false

                            });
                            onChangeCatalogProject.appliesToCatalogItem(true);
                            var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEnvironments\'); ga.addParam(\'sysparm_cat_sys_id\', cat_sys_id); ga.addParam(\'sysparm_project_id\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var result = JSON.parse(answer); if (result.length == 0) { g_form.hideFieldMsg(\'default_environment\', true); g_form.clearOptions(\'default_environment\'); g_form.showFieldMsg(\'default_environment\', \'This Project has no valid Environments configured, you cannot proceed with the launch. Please contact your administrator\'); g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); if (portal_check == \'true\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } } g_form.setMandatory(\'default_profile\', true); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); if (portal_check == \'false\') { var elemen = g_form.elements; for (var i in elemen) { if(elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\' ) continue; g_form.setDisplay(elemen[i].fieldName, false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.clearMessages(); g_form.clearOptions(\'default_environment\'); g_form.clearValue(\'default_environment\'); for (var i = 0; i < result.length; i++) { var jsonObj = result[i]; g_form.addOption(\'default_environment\', jsonObj.UUID + \'\', jsonObj.Name + \'\'); } if (portal_check == \'true\') { var jsonobj = result[0]; g_form.setValue(\'default_environment\', jsonObj.UUID); } } } } }";
                            onChangeCatalogProject.addScript(onChangeProjectScript);
                            var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + gr.item_name);

                            //onchange

                            var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                            onChangeCatalogEnvironment.setAttributes({
                                "name": "On Change of Environment variable",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name + '',
                                "cat_variable": "IO:" + envFieldSysID,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false
                            });
                            onChangeCatalogEnvironment.appliesToCatalogItem(true);
                            var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var loadingDialog = new GlideModal(\'environment_loader\', true); loadingDialog.setTitle(\'Fetching Profiles...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i < g_form.getControl(\'default_project\').options.length; i++) { if (g_form.getControl(\'default_project\').options[i].value == g_form.getValue(\'default_project\')) { def_project = g_form.getControl(\'default_project\').options[i].innerText; break; } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(\' On Change of Environment variable answer\' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\') continue; g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + \'\' == \'container\' || elemen[i].type + \'\' == \'checkbox_container\') continue; g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); for (var i = 0; i < answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.setReadOnly(\'default_profile\', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.clearValue(\'default_profile\'); for (var i = 0; i < answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } g_form.setValue(\'default_profile\', answer[0]); if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } } }";
                            onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                            var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + gr.item_name);
                        } catch (e) {
                            gs.info('Fetch 3.2:: ' + e.message);
                        }
                    }
                }
			}
			
			 gs.setProperty("x_nuta2_nutanix_ca.1_5_2", "1");
			this.logger.info("Migration to v1.5.2 is completed");
		}catch (e) {
            this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotFiveDotTwo() Error : - " + e);
        }
    },


    updateTheCatalogClientScriptForOneDotFiveDotOne: function() {
        try {
            this.updateBpTypeForOneDotFive();
            var gr = new GlideRecord("x_nuta2_nutanix_ca_nutanix_runtime_configuration");
            gr.query();

            while (gr.next()) {

                var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                fieldGR.addEncodedQuery('cat_item=' + gr.item_name + '');
                fieldGR.query();
                var nic_list = '';
                var counter = 0;
                var nicSysIdList = [];
                while (fieldGR.next()) {

                    if ((fieldGR.name + '').indexOf('_nic_') != -1) {
                        nicSysIdList.push(fieldGR.sys_id + '');
                        nic_list = "Populate Nic on change of Nic Sys_id : " + counter + ' ,' + nic_list;
                        counter++;
                    }
                }
                gs.info('nic_list:: ' + nic_list);
                var catalogScriptGR = new GlideRecord('catalog_script_client');
                catalogScriptGR.addQuery('cat_item', gr.item_name + '');
                catalogScriptGR.addEncodedQuery('nameINGet Project and Profile List onLoad,Get Credentials OnLoad,Fetch values OnChange,Fetch dynamic value for advance variable,Fetch form data on change of profile,Get Subnet Info,Check AppName OnChange,Check AppName OnSubmit,Hide Order details on request,Get Subnet Info on project change,Check Catalog Item Validity project,Check Catalog Item Validity profile,Set Session Vars,Fetch dependencies on change of profile,Service portal fixes,On Change of Project,On Change of Environment variable,Check Catalog Item Validity,' + nic_list);
                catalogScriptGR.query();

                var catalogClientScript = new sn_sc.CatalogClientScript();
                var fieldList = [];
                var envFieldSysID;
                var profilesysID;
                var fetchformSysID;
                var appSysID;
                var subnetInfo;
                var catItemValidity;
                var catItemProValidity;
                var setSessionVars;
                var portalfix;
                var onchangeproject;


                // For NIC onchange



                while (catalogScriptGR.next()) {
                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                    if (catalogScriptGR.name + '' == 'Fetch values OnChange' && fieldList.indexOf(field) == -1)
                        fieldList.push(field);
                    else if (catalogScriptGR.name + '' == 'On Change of Environment variable')
                        envFieldSysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch dependencies on change of profile')
                        profilesysID = field;
                    else if (catalogScriptGR.name + '' == 'Fetch form data on change of profile')
                        fetchformSysID = field;
                    else if (catalogScriptGR.name + '' == 'Check AppName OnChange')
                        appSysID = field;
                    else if (catalogScriptGR.name + '' == 'Get Subnet Info on project change')
                        subnetInfo = field;
                    else if (catalogScriptGR.name + '' == 'Check Catalog Item Validity project')
                        catItemValidity = field;
                    else if (catalogScriptGR.name + '' == 'Check Catalog Item Validity profile')
                        catItemProValidity = field;
                    else if (catalogScriptGR.name + '' == 'Set Session Vars')
                        setSessionVars = field;
                    else if (catalogScriptGR.name + '' == 'Service portal fixes')
                        portalfix = field;
                    else if (catalogScriptGR.name + '' == 'On Change of Project')
                        onchangeproject = field;

                }

                //onchange

                for (var x = 0; x < nicSysIdList.length; x++) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Populate Nic on change of Nic Sys_id : " + x,
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + nicSysIdList[x],
                        "active": true,
                        "order": 400,
                        "description": "This script is created for onChange of Nic",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } function addNicOptions(relatedNic) { for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal && clusterVal) for (var j in clusterInfo[l].subnet) { g_form.removeOption(relatedNic[n], j); } } } } } else { var clusterJson = JSON.parse(sessionStorage.getItem('clusterName_' + g_form.getUniqueValue())); var catCluster = clusterJson.catalog_data; var clusterInfo = clusterJson.cluster_info; var clusterVal; for (var i in clusterInfo) { for (var k in clusterInfo[i].subnet) { if (k == newValue) { clusterVal = i + ''; } } } var clustername, relatedNic; for (var i in catCluster) { var nic = catCluster[i].nics; for (var k in nic) { var nicElem = nic[k]; if ('" + nicSysIdList[x] + "' == k) { if (!catCluster[i].value) { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; addNicOptions(relatedNic); } else { g_form.setValue(catCluster[i].name, clusterVal); relatedNic = catCluster[i].nics; } } } } if (typeof clusterVal == \"undefined\") { g_form.showFieldMsg(catCluster[i].name,'This Nic is not associated with the project, Please select another Nic. To Filterout unassociated Nic reload the page.', 'error'); } function addNicOptions(relatedNic){ for (var n in relatedNic) { for (var l in clusterInfo) { if (l != clusterVal && clusterVal) for (var j in clusterInfo[l].subnet){ g_form.removeOption(relatedNic[n], j); } } } } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var onChangeCatalogClientScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onChangeCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();

                    }
                }




                //Fetch values on change loop

                var fieldListLength = fieldList.length;
                while (fieldListLength--) {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + fieldList[fieldListLength],
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (!sessionStorage[\'varValues\']) return; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control.id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { new GlideModal().get(\'loader\').destroy(); return; } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { if (i + \'\' == control.id + \'\') continue; var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { if (control.id + \'\' == k) { continue; } var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control.id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { new GlideModal().get(\'loader\').destroy(); var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; if (control.id + \'\' == sys_id) { continue; } var type = row.type + \'\'; if (row.state == \'SUCCESS\' && (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } if (row.state == \'ERROR\') { g_form.clearOptions(sys_id); g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching variables...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse, null, loadingDialog); } else { try { if (!sessionStorage[\'varValues\']) return; var control_id =\'" + fieldList[fieldListLength] + "\'; var varValues = JSON.parse(sessionStorage[\'varValues\']); oldValue = varValues[control_id + \'\']; if (isLoading || newValue == \'\' || oldValue + \'\' == newValue + \'\') { return; } console.log(oldValue); console.log(newValue); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); varValues[\'IO:\' + i] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = i + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); varValues[\'IO:\' + k] = curr_value + \'\'; var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value, parsed_field.sys_id = k + \'\', var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(varValues); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'), gajax.addParam(\'sysparm_field\', control_id + \'\'), gajax.addParam(\'sysparm_type\', \'catalog\'), gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'), gajax.addParam(\'sysparm_varJson\', act_var_JSON), gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')), gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')), gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' && (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); g_form.setValue(sys_id, row.value[0]); } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } g_form.setValue(sys_id, row.value); } row.state == \'ERROR\' && g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'), ga.addParam(\'sysparm_catsysid\', cat_sys_id), ga.addParam(\'sysparm_profile\', profile), ga.getXML(varResponse); } catch (e) { console.log(\'Fetch values OnChange\' + e) } } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                }

                //onload
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {

                    try {
                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Get Project and Profile List onLoad",
                            "type": "onLoad",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "active": "true",
                            "order": "100",
                            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                            "applies_catalog": "true",
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "";
                        if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) >= parseFloat("3.2")) {
                            onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i < projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } if (portal_check == 'true') { project = projectList[0]; g_form.setValue('default_project', project.uuid); } if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (portal_check == 'false') new GlideModal().get('loader').destroy(); } } catch (e) { console.log('Exception in Get project and profile list onload ' + e.message); }}";
                        } else {
                            onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if(portal_check =='false') { var loadingHTML = \"<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'><\/div><\/div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent('' + loadingHTML); } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); if(portal_check == 'false') ga.getXML(parseResponse, null, loadingDialog); else ga.getXML(parseResponse); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i < projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i < profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } new GlideModal().get('loader').destroy(); var loadingHTML = \"<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'><\/div><\/div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse, null, loadingDialog); } function parseResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions('default_project'); for (var i = 0; i < projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name); } var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i < profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]); if (projectList.length == 1) { g_form.setReadOnly('default_project', true); } if (profileList.length == 1) { g_form.setReadOnly('default_profile', true); } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponseForPortal); } function varResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function varResponseForPortal(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } } } } }";
                        }
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(onLoadCatalogClientScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Get Project and Profile List onLoad: ' + e.message);
                    }
                }

                // onload

                try {
                    gs.info('get_credentialss:: ' + gr.item_name);
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Credentials OnLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 900,
                        "description": "This script is auto created thorugh runtime module for getting Credentials list.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference && credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference && credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); } } } } catch(e) { console.log('Exception Inside Get Credentials OnLoad '+e.message); } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Get Credentials OnLoad: ' + e.message);
                }


                //onload

                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Fetch dynamic value for advance variables onload",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "This script is created for fetching dynamic values for advance variables onload.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXML(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = \"<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Dynamic values for advance variables...'); loadingDialog.renderWithContent('' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k < (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage('Error in variable: ' + keys[i] + ': ' + row.options.values[0]); } } new GlideModal().get('loader').destroy(); } } else { var cat_sys_id = g_form.getUniqueValue(); var elemen = g_form.nameMap; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'advanceVariableDynamicOptions'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage['FieldRegex_' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + '']; if (row.options.state == 'SUCCESS') { g_form.clearOptions(keys[i] + ''); for (var k = 0; k < (row.options.values).length; k++) { g_form.addOption(keys[i] + '', row.options.values[k], row.options.values[k]); } } else { g_form.showFieldMsg(keys[i], 'Error in variable: ' + keys[i] + ': ' + row.options.values[0], 'error'); } } } } } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Fetch dynamic value for advance variables onload: ' + e.message);
                }

                //onchange********************** (need to change variable onchange)

                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {
                        var catalogScriptGR = new sn_sc.CatalogClientScript();
                        catalogScriptGR.setAttributes({
                            "name": "Fetch form data on change of profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + fetchformSysID,
                            "active": true,
                            "order": 100,
                            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        catalogScriptGR.appliesToCatalogItem(true);
                        var script = '';
                        if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) >= parseFloat("3.2")) {
                            script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { if (newValue == \'\') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', false); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setMandatory(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); g_form.setReadOnly(\'default_environment\', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var envUUID = (g_form.getValue(\'default_environment\') + \'\').trim(); var projectUUID = (g_form.getValue(\'default_project\') + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.addParam(\'sysparm_project\', projectUUID); ga.addParam(\'sysparm_env\', envUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference && credential.credential_reference[0].name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); for (var i = 0; i < credential.credential_reference.length; i++) { g_form.addOption(name + \'_credential_reference\', credential.credential_reference[i].uuid + \'\', credential.credential_reference[i].name + \'\'); } if (credential.credential_reference.length <= 1) { g_form.setReadOnly(name + \'_credential_reference\', \'true\'); } else g_form.setReadOnly(name + \'_credential_reference\', \'false\'); g_form.setDisplay(name + \'_credential_reference\', credential.credential_reference[0].readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } } else { var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == \'formatter\' || object1[i].var_type == \'container\' || object1[i].var_type == \'checkbox_container\' || object1[i].var_type == \'undefined\' || object1[i].var_type == \'Container Start\') { continue; } if (object1[i].var_name != \'default_app_name\') { g_form.setMandatory(object1[i].var_name + \'\', false); } if (object1[i].var_name != \'default_environment\' && object1[i].var_name != \'default_project\' && object1[i].var_name != \'default_profile\') { g_form.setDisplay(object1[i].var_name + \'\', false); } } } g_form.setDisplay(\'provider_icons\', \'true\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_environment\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute(\'answer\'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (object1[i].var_type + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log(\'Inside onchange profile: \' + e.message); } }";
                        } else {
                            script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var loadingDialogbox = new GlideModal(\'loader\', true); loadingDialogbox.setTitle(\'Fetching Order Form Data...\'); loadingDialogbox.renderWithContent(\'\' + loadingHTML); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].prettyName != \'default_app_name\') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', false); g_form.setReadOnly(\'default_app_name\', false); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialogbox); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); if (parsed[i].mandatory) { g_form.setMandatory(i + \'\', parsed[i].mandatory); } } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get(\'loader\').destroy(); var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Fetching Credentials List...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchCredentialsList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + \'\').toLowerCase().replace(\/ \/g, \'_\'); g_form.setValue(name + \'_credential_name\', credential.name + \'\'); g_form.setReadOnly(name + \'_credential_name\', true); g_form.setValue(name + \'_secret_type\', credential.type + \'\', (credential.type + \'\' == \'KEY\') ? \'SSH Private Key\' : \'Password\'); g_form.setReadOnly(name + \'_secret_type\', true); g_form.setValue(name + \'_username\', credential.username.value); g_form.setReadOnly(name + \'_username\', credential.username.readOnly); g_form.setDisplay(name + \'_username\', !credential.username.readOnly); if ((credential.type == \'KEY\')) { g_form.setValue(name + \'_ssh_private_key\', credential.ssh_private_key.value); g_form.setReadOnly(name + \'_ssh_private_key\', credential.ssh_private_key.readOnly); g_form.setValue(name + \'_passphrase\', credential.passphrase.value); g_form.setReadOnly(name + \'_passphrase\', credential.passphrase.readOnly); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_ssh_private_key\', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + \'_passphrase\', !credential.passphrase.readOnly); } else { g_form.setValue(name + \'_password\', \'\'); credArr[name + \'_password\'] = credential.password.value; g_form.setReadOnly(name + \'_password\', credential.password.readOnly); g_form.setDisplay(name + \'_password\', !credential.password.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); } g_form.setDisplay(name + \'_credential_reference\', \'false\'); if (credential.credential_reference && credential.credential_reference.name) { g_form.setDisplay(name + \'_credential_reference\', \'true\'); g_form.addOption(name + \'_credential_reference\', credential.credential_reference.uuid + \'\', credential.credential_reference.name + \'\'); g_form.setReadOnly(name + \'_credential_reference\', credential.credential_reference.readOnly); g_form.setDisplay(name + \'_credential_reference\', !credential.credential_reference.readOnly); g_form.setDisplay(name + \'_ssh_private_key\', \'false\'); g_form.setDisplay(name + \'_passphrase\', \'false\'); g_form.setDisplay(name + \'_password\', \'false\'); g_form.setDisplay(name + \'_secret_type\', \'false\'); } } sessionStorage[\'credentials_\' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get(\'loader\').destroy(); } } }";
                        }
                        catalogScriptGR.addScript(script);
                        var ScriptId = catalogScriptGR.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(ScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Fetch form data on change of profile: ' + e.message);
                    }
                }
                //onload (ACTIVE = FALSE);

                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Subnet Info",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": false,
                        "order": 50,
                        "description": "This script is created for getting subnet list.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x < n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s < nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Get Subnet Info: ' + e.message);
                }

                //onchange

                try {
                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + appSysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var name = newValue; if ((newValue.length != ((newValue.trim()).length)) || (!(\/^[\\_\\-\\w ]+$\/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) { if(portal_check == 'false') g_form.clearValue('default_app_name'); else g_form.setValue('default_app_name', ''); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.'); } } }";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check AppName OnChange: ' + e.message);
                }

                //onsubmit

                try {
                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": 'false',
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j < n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') && j == n - 1 && listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') && value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value && row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  && flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  && flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onSubmitcatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check AppName OnSubmit: ' + e.message);
                }

                //onload

                try {
                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": '10',
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() { var blueprintType = \"\"; if (g_form.getTableName() + \'\' == \'sc_req_item\') { var item_name = g_form.getValue(\"cat_item\"); var glide = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); glide.addParam(\'sysparm_name\', \'fetchBlueprintType\'); glide.addParam(\'sysparm_item_sys_id\', item_name); glide.getXML(getBlueprintResponse); function getBlueprintResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); blueprintType = answer; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } g_form.setMandatory(flds[i].prettyName, false); g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay(\'provider_icons\', \'false\'); g_form.setReadOnly(\'default_project\', true); g_form.setReadOnly(\'default_environment\', true); g_form.setReadOnly(\'default_app_name\', true); g_form.setReadOnly(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setDisplay(\'default_app_name\', true); g_form.setDisplay(\'default_profile\', true); if (blueprintType == \"Runbook\" || blueprintType == \"Marketplace Runbook\") { g_form.setDisplay(\'default_endpoint\', true); } var profile = g_form.getValue(\'default_profile\') + \'\'; var cat_sys_id = g_form.getValue(\'cat_item\') + \'\'; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga.addParam(\'sysparm_profile\', profile + \'\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id + \'\'); ga.getXML(parseResponse); } } function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } g_form.setReadOnly(i + \'\', true); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Hide Order details on request: ' + e.message);
                }

                //onchange

                try {
                    var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript1.setAttributes({
                        "name": "Get Subnet Info on project change",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + subnetInfo,
                        "active": true,
                        "order": 600,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript1.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } for (var k in catalog_clusterJSON) { for (var i in catalog_clusterJSON[k].nics) { if (catalog_clusterJSON[k].value + \'\') { for (var l in clusterJSON) { var subnetList = clusterJSON[l].subnet; if (l != catalog_clusterJSON[k].value + \'\') for (var s in subnetList) { \/*g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', s);*\/ } } } { var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + \'\'); var n=0; if(opt.options) { n = opt.options.length; } for (var x = 1; x < n; x++) { var present = false; var val = opt.options[x].value + \'\'; for (var s = 0; s < nicList.length; s++) { if (nicList[s][val]) { present = true; break; } } if (!present) { g_form.removeOption(catalog_clusterJSON[k].nics[i] + \'\', opt.options[x].value + \'\'); x--; n--; } } } } } } } else { try { var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.addParam(\'sysparm_ProjectUuid\', newValue); ga.getXML(processAnswer); function processAnswer(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); sessionStorage[\'clusterName_\' + g_form.getUniqueValue()] = ans; ans = JSON.parse(ans); var catalog_clusterJSON = ans.catalog_data; clusterJSON = ans.cluster_info; var nicList = []; for (var m in clusterJSON) { nicList.push(clusterJSON[m].subnet); } var nic_variable_namme = []; for (var n in catalog_clusterJSON) { var nics = catalog_clusterJSON[n].nics; for (var k in nics) nic_variable_namme.push(nics[k]); } var catNicJson = { \"nic\": nic_variable_namme, \"nicList\": nicList }; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'setSubnet\'); ga.addParam(\'sysparm_catSysID\', catalogSysId); ga.addParam(\'sysparm_catNicJson\', JSON.stringify(catNicJson)); ga.getXML(processAnswer1); function processAnswer1(response) { var ans = response.responseXML.documentElement.getAttribute(\'answer\'); } } } catch (err) {} } } }";
                    onChangecatalogClientScript1.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('"Get Subnet Info on project change: ' + e.message);
                }

                //onchange


                try {
                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Check Catalog Item Validity project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + catItemValidity,
                        "active": true,
                        "order": 1,
                        "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } g_form.setReadOnly(\'default_endpoint\', false); var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { var selectedEndpointList; var allEndpointList; portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Project Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'sysparm_projectUUID\', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" && flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" && flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint associated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i < final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } else { var projectUUID = (newValue + \'\').trim(); if (projectUUID == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'project\'); ga.addParam(\'projectUUID\', projectUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for (var index in parsed) { var message = \'\'; if (parsed[index].state == \'INACTIVE\') { message = parsed[index].name + \' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \' + parsed[index].name + \' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\\\[]\/, \"\\\\\\\\\\\\[\").replace(\/[\\\\]]\/, \"\\\\\\\\\\\\]\"); var regexS = \"[\\\\\\\\?&]\" + name + \"=([^&#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&catalog_id=240abede37112300fdfc097973990e24\'; } var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchSelectedEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); selectedEndpointList = parsed.endpointList; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEndpointAssociatedToProject\'); ga.addParam(\'sysparm_projectID\', newValue); ga.addParam(\'sysparm_selected_endpoint\', JSON.stringify(selectedEndpointList)); ga.getXML(parseResponseProjectAndEndpointList); function parseResponseProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(\"Endpoint assciated to new project ::\" + answer); var parse = JSON.parse(answer); var final_endpointList = parse.single; g_form.clearOptions(\'default_endpoint\'); for (var i = 0; i < final_endpointList.length; i++) { var endpoint = final_endpointList[i]; g_form.addOption(\'default_endpoint\', endpoint.uuid + \'\', endpoint.name + \'\'); console.log(\"endpoint ::\" + endpoint.uuid); if (endpoint.uuid == \"\") { g_form.showFieldMsg(\'default_endpoint\', \'There are no applicable Endpoints(s) that match the selected Project. Please choose a different Project to proceed.\'); } } if (final_endpointList.length == 1) { g_form.setReadOnly(\'default_endpoint\', true); } } } } } }";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(onLoadCatalogClientScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Check Catalog Item Validity project: ' + e.message);
                }


                //onchange
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {

                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Check Catalog Item Validity profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + catItemProValidity,
                            "active": true,
                            "order": 1,
                            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); var envUUID = (g_form.getValue(\'default_environment\')+\'\').trim(); var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var loadingDialog = new GlideModal(\'loader\', true); loadingDialog.setTitle(\'Checking Blueprint Status...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'sysparm_blueprintType\', blueprintType); ga.addParam(\'sysparm_blueprintUUID\', blueprintUUID); ga.addParam(\'sysparm_envUUID\', envUUID); ga.addParam(\'sysparm_profileSysId\', profileSysId); ga.addParam(\'sysparm_profileName\', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } } new GlideModal().get(\'loader\').destroy(); } function clearFieldValue(message) { var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + \'\'] + \'\' == \'formatter\' || fldType[flds[i].realName + \'\'] + \'\' == \'container\' || fldType[flds[i].realName + \'\'] + \'\' == \'checkbox_container\' || fldType[flds[i].realName + \'\'] + \'\' == \'undefined\') { continue; } if (flds[i].label == \"Project\" && flds[i].prettyName == \"default_project\") continue; if (flds[i].label == \"Profile\" && flds[i].prettyName == \"default_profile\") continue; if (flds[i].prettyName.indexOf(\'cluster_name\') == -1) g_form.clearValue(flds[i].prettyName); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } } function getParameterValue(name) { name = name.replace(\/[[]\/, \"\\[\").replace(\/[]]\/, \"\\]\"); var regexS = \"[\\?&]\" + name + \"=([^&#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } else { var blueprintType = getParameterValue(\'type\') + \'\'; var blueprintUUID = getParameterValue(\'uuid\') + \'\'; var profileSysId = getParameterValue(\'profileSysId\') + \'\'; var profileName = (newValue + \'\').trim(); if (profileName == \'\') return; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'checkCatalogValidity\'); ga.addParam(\'onChangeType\', \'profile\'); ga.addParam(\'blueprintType\', blueprintType); ga.addParam(\'blueprintUUID\', blueprintUUID); ga.addParam(\'profileSysId\', profileSysId); ga.addParam(\'profileName\', profileName); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); for(var index in parsed) { var message = \'\'; if(parsed[index].state == \'INACTIVE\'){ message = parsed[index].name+\' is not available at Calm. So, Catalog Item cant be launched.Re - Directing back to catalog launch page. \'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } else if (parsed[index].state == \'CANTCHECK\') { message = \' Cant check whether the \'+ parsed[index].name+\' from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.\'; alert(message); self.location = \'\/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true\'; } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } function clearFieldValue(message) { alert(message); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'getFieldDetails\'); ga.addParam(\'cat_item_sys_id\', g_form.getUniqueValue()); ga.addParam(\'fieldNameArray\', g_form.getFieldNames()); ga.getXML(parseResponse1); function parseResponse1(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var object = JSON.parse(answer); for (var i in object) { if (object[i].var_type == \'formatter\' || object[i].var_type == \'container\' || object[i].var_type == \'checkbox_container\' || object[i].var_type == \'undefined\' || object[i].var_type == \'Container Start\') { continue; } if (object[i].var_name.indexOf(\'cluster_name\') == -1) g_form.clearValue(object[i].var_name); } } self.location = \'\/sp?id=sc_category&catalog_id=240abede37112300fdfc097973990e24\'; } } } } catch (e) { console.log(\'inside Check Catalog Item Validity profile:: \' + e.message); } }";
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(onLoadCatalogClientScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Check Catalog Item Validity profile: ' + e.message);
                    }
                }

                //onchange

                try {
                    var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript2.setAttributes({
                        "name": "Set Session Vars",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + setSessionVars,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for setting session json.",
                        "applies_catalog": true,
                        "ui_type": '10',
                        "applies_req_item": false,
                        "applies_sc_task": false

                    });
                    onChangecatalogClientScript2.appliesToCatalogItem(true);
                    var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } try { var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; } for (var j in serv_json) { for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; } } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } } else { var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } } catch (e) { console.log(\'inside Set Session Vars:: \' + e.message); } }";
                    onChangecatalogClientScript2.addScript(onChangeScriptSess);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(OnChangeCatalogScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Set Session Vars: ' + e.message);
                }


                //onchange
                //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                    try {
                        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                        onChangecatalogClientScript3.setAttributes({
                            "name": "Fetch dependencies on change of profile",
                            "type": "onChange",
                            "applies_to": "item",
                            "cat_item": gr.item_name + '',
                            "cat_variable": "IO:" + profilesysID,
                            "active": true,
                            "order": 900,
                            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                            "applies_catalog": true,
                            "ui_type": '10',
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });
                        onChangecatalogClientScript3.appliesToCatalogItem(true);
                        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + \'\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); if (portal_check == \'false\') parsed_field.def_val = parsed_field.value + \'\'; parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_field\', \'onLoad\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\' && (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\')) { g_form.clearOptions(sys_id); if (row.value) { for (var k = 0; k < row.value.length; k++) g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } if (row.value != \'\' && row.value != \'undefined\') { g_form.setValue(sys_id, row.value[0]); } } else { if (row.data_type + \'\' != \'BASE\') { g_form.clearOptions(sys_id); if (row.options) { for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + \'\', row.options[k], row.options[k]); } } if (row.value != \'\' && row.value != \'undefined\') { g_form.setValue(sys_id, row.value); } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } if (portal_check == \'false\') new GlideModal().get(\'variables_loader\').destroy(); } } } } }";
                        onChangecatalogClientScript3.addScript(onChangeScriptVars);
                        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
                        var grChange = new GlideRecord('catalog_script_client');
                        if (grChange.get(OnChangeCatalogScriptId)) {
                            grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                            grChange.setValue('sys_policy', 'protected');
                            grChange.update();
                        }
                    } catch (e) {
                        gs.info('Fetch dependencies on change of profile:: ' + e.message);
                    }
                }

                //onchange
                try {
                    gs.info('portal_fix: ' + portalfix);
                    var active_flag = gs.getProperty('x_nuta2_nutanix_ca.Nutanix_Calm_Select_Service_Portal') + '';

                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Service portal fixes",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": gr.item_name + '',
                        "cat_variable": "IO:" + portalfix,
                        "active": active_flag,
                        "order": 300,
                        "description": 'This script is auto created thorugh runtime module for service portal fixes.',
                        "applies_catalog": true,
                        "ui_type": "10",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var Script = "function onChange(control, oldValue, newValue, isLoading) { try { if (isLoading) { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if( portal_check == 'true') { if (newValue == '') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay('default_profile', true); g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true); g_form.setDisplay('default_app_name', true); g_form.setMandatory('default_profile', true); } else { var credentials = g_form.getFieldNames(); for (var i in credentials) { if (credentials[i].includes('_password') || credentials[i].includes('_private_key') || credentials[i].includes('_passphrase')) { g_form.setVisible(credentials[i] + '', false); } } var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'extraFields'); ga.addParam('sysparm_catSysID', g_form.getUniqueValue()); ga.addParam('sysparm_fieldNames', g_form.getFieldNames()); ga.addParam('sysparm_profile', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object = JSON.parse(answer); var extraFields = JSON.parse(object.extraFields); var privateFields = JSON.parse(object.privateFields); var showRuntimeVariables = JSON.parse(object.showRuntimeVariables); var secretVariables = JSON.parse(object.secretVariables); var extraCredentials = JSON.parse(object.extraCredentials); for (var i in extraFields) g_form.setVisible(extraFields[i] + '', false); for (var j in privateFields) g_form.setVisible(privateFields[j] + '', false); for (var k in showRuntimeVariables) g_form.setVisible(showRuntimeVariables[k] + '', true); for (var l in secretVariables) g_form.clearValue(secretVariables[l] + ''); for (var m in extraCredentials) g_form.setVisible(extraCredentials[k] + '', true); } } } } } catch (e) { console.log('Service portal fix' + e); }}";
                    catalogScriptGR.addScript(Script);
                    var ScriptId = catalogScriptGR.create();
                    var grChange = new GlideRecord('catalog_script_client');
                    if (grChange.get(ScriptId)) {
                        grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                        grChange.setValue('sys_policy', 'protected');
                        grChange.update();
                    }
                } catch (e) {
                    gs.info('Fetch dependencies on change of profile:: ' + e.message);
                }


                //ONLOAD


                var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                onLoadCatalogClientScript.setAttributes({
                    "name": "Check Catalog Item Validity",
                    "type": "onLoad",
                    "applies_to": "item",
                    "cat_item": gr.item_name + '',
                    "active": false,
                    "order": 1,
                    "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
                    "applies_catalog": true,
                    "ui_type": '10',
                    "applies_req_item": false,
                    "applies_sc_task": false
                });
                onLoadCatalogClientScript.appliesToCatalogItem(true);
                var onLoadScript = "function onLoad() { var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var projectUUID = getParameterValue('projectUUID') + ''; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName); } 				 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; 				 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
                onLoadCatalogClientScript.addScript(onLoadScript);
                var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                var grChange = new GlideRecord('catalog_script_client');
                if (grChange.get(onLoadCatalogClientScriptId)) {
                    grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                    grChange.setValue('sys_policy', 'protected');
                    grChange.update();
                }

                //IFCONDITION onchange

                if (parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) >= parseFloat("3.2")) {
                    //if(gr.getDisplayValue('category') == 'Blueprint' || gr.getDisplayValue('category') == 'Marketplace Blueprint') {
                    if (gr.item_name.category == '7a30431637512300fdfc097973990ec8' || gr.item_name.category == '88bfbad237512300fdfc097973990e06') {
                        try {
                            var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                            onChangeCatalogProject.setAttributes({
                                "name": "On Change of Project",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name,
                                "cat_variable": "IO:" + onchangeproject,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false

                            });
                            onChangeCatalogProject.appliesToCatalogItem(true);
                            var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchEnvironments\'); ga.addParam(\'sysparm_cat_sys_id\', cat_sys_id); ga.addParam(\'sysparm_project_id\', newValue); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var result = JSON.parse(answer); if (result.length == 0) { g_form.hideFieldMsg(\'default_environment\', true); g_form.clearOptions(\'default_environment\'); g_form.showFieldMsg(\'default_environment\', \'This Project has no valid Environments configured, you cannot proceed with the launch. Please contact your administrator\'); g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); if (portal_check == \'true\') { var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } } g_form.setMandatory(\'default_profile\', true); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); if (portal_check == \'false\') { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.clearMessages(); g_form.clearOptions(\'default_environment\'); g_form.clearValue(\'default_environment\'); for (var i = 0; i < result.length; i++) { var jsonObj = result[i]; g_form.addOption(\'default_environment\', jsonObj.UUID + \'\', jsonObj.Name + \'\'); } if (portal_check == \'true\') { var jsonobj = result[0]; g_form.setValue(\'default_environment\', jsonObj.UUID); } } } } }";
                            onChangeCatalogProject.addScript(onChangeProjectScript);
                            var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Project (calm evirment 3.2) client script on  " + gr.item_name);

                            //onchange

                            var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                            onChangeCatalogEnvironment.setAttributes({
                                "name": "On Change of Environment variable",
                                "type": "onChange",
                                "applies_to": "item",
                                "cat_item": gr.item_name + '',
                                "cat_variable": "IO:" + envFieldSysID,
                                "active": true,
                                "order": 700,
                                "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                                "applies_catalog": true,
                                "ui_type": '10',
                                "applies_req_item": false,
                                "applies_sc_task": false
                            });
                            onChangeCatalogEnvironment.appliesToCatalogItem(true);
                            var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == \'\') { return; } var portal_check; var portalgr = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); portalgr.addParam(\'sysparm_name\', \'getPortalCompatibility\'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == \'false\') { var loadingHTML = \"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'><\/div><\/div>\"; var loadingDialog = new GlideModal(\'environment_loader\', true); loadingDialog.setTitle(\'Fetching Profiles...\'); loadingDialog.renderWithContent(\'\' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i < g_form.getControl(\'default_project\').options.length; i++) { if (g_form.getControl(\'default_project\').options[i].value == g_form.getValue(\'default_project\')) { def_project = g_form.getControl(\'default_project\').options[i].innerText; break; } } var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_pro\', def_project + \'\'); ga.addParam(\'sysparm_profile\', gUrl.getParam(\'profileSysId\')); ga.addParam(\'sysparm_blueprint\', gUrl.getParam(\'uuid\')); ga.addParam(\'sysparm_type\', gUrl.getParam(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); jslog(\' On Change of Environment variable answer\' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay(\'default_profile\', true); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { var elemen = g_form.elements; for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); for (var i = 0; i < answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); new GlideModal().get(\'environment_loader\').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchProfilesBasisOnEnvironment\'); ga.addParam(\'sysparm_env\', g_form.getValue(\'default_environment\')); ga.addParam(\'sysparm_proValue\', g_form.getValue(\'default_project\')); ga.addParam(\'sysparm_sysID\', g_form.getUniqueValue()); ga.addParam(\'sysparm_type\', getParameterValue(\'type\')); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.showFieldMsg(\'default_profile\', \'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.\'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay(\'default_profile\', true); g_form.setReadOnly(\'default_profile\', false); g_form.setDisplay(\'default_project\', true); g_form.setDisplay(\'default_environment\', true); g_form.setMandatory(\'default_profile\', true); } else { g_form.setReadOnly(\'default_profile\', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + \'\' === \'default_profile\' || elemen[i] + \'\' === \'default_project\' || elemen[i] + \'\' === \'default_environment\' || elemen[i] + \'\' === \'default_app_name\') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg(\'default_profile\', true); g_form.clearOptions(\'default_profile\'); g_form.clearValue(\'default_profile\'); for (var i = 0; i < answer.length; i++) { g_form.addOption(\'default_profile\', answer[i], answer[i]); } g_form.setValue(\'default_profile\', answer[0]); if (answer.length == 1) { g_form.setReadOnly(\'default_profile\', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue(\'default_profile\').trim(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchLaunchVars\'); ga.addParam(\'sysparm_catsysid\', cat_sys_id); ga.addParam(\'sysparm_profile\', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue(\'IO:\' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + \'\'; sess_json[\'IO:\' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue(\'IO:\' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + \'\'; sess_json[\'IO:\' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage[\'varValues\'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); gajax.addParam(\'sysparm_name\', \'variableArrayParser\'); gajax.addParam(\'sysparm_type\', \'catalog\'); gajax.addParam(\'sysparm_parentUuid\', g_form.getUniqueValue() + \'\'); gajax.addParam(\'sysparm_varJson\', act_var_JSON); gajax.addParam(\'sysparm_profile_sysid\', g_form.getValue(\'default_profile\')); gajax.addParam(\'sysparm_envsysid\', g_form.getValue(\'default_environment\')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); if (answer + \'\' == \'\' || answer + \'\' == \'undefined\' || answer + \'\' == \'null\') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = \'IO:\' + row.sys_id; var type = row.type + \'\'; if (row.state == \'SUCCESS\') { if (type == \'LOCAL\') g_form.setValue(sys_id, row.value); if (type == \'EXEC_LOCAL\' || type == \'HTTP_LOCAL\' || type == \'EXEC_SECRET\' || type == \'HTTP_SECRET\') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + \'\', row.value[k], row.value[k]); } } } if (row.state == \'ERROR\') { g_form.addErrorMessage(\'Error in variable: \' + row.name + \': \' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(\/[\\[]\/, \"\\\\\\[\").replace(\/[\\]]\/, \"\\\\\\]\"); var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return \"\"; } else { return unescape(results[1]); } } } } }";
                            onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                            var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                            var grChange = new GlideRecord('catalog_script_client');
                            if (grChange.get(OnChangeCatalogScriptId)) {
                                grChange.setValue("sys_scope", "3b7631654f452b001200e5201310c76b");
                                grChange.setValue('sys_policy', 'protected');
                                grChange.update();
                            }
                            this.logger.debug("Created On Change of Environment (calm evirment 3.2) client script on  " + gr.item_name);
                        } catch (e) {
                            gs.info('Fetch 3.2:: ' + e.message);
                        }
                    }
                }

                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr.item_name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
					var column_fields={};
					column_fields.sys_scope = "3b7631654f452b001200e5201310c76b";
					if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
					
                }

            }
            var gr_bp = new GlideRecord(this.appUtil.configuration.table.Blueprint + '');
            gr_bp.query();
            while (gr_bp.next()) {
                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr_bp.name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
					var column_fields={};
                    if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
                   var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
                }
            }
            var gr_mpi = new GlideRecord(this.appUtil.configuration.table.marketplaceItem + '');
            gr_mpi.query();
            while (gr_mpi.next()) {
                var var_update = new GlideRecord(this.appUtil.configuration.table.varaiblesTable + '');
                var_update.addQuery('cat_item.name', gr_mpi.name.getDisplayValue() + '');
                var_update.query();
                while (var_update.next()) {
				 var column_fields={};
                    if (var_update.name == 'default_app_name')
                        column_fields.order = 1;
                    if (var_update.name == 'default_project')
                        column_fields.order = 2;
                    if (var_update.name == 'default_environment')
                        column_fields.order = 3;
                    if (var_update.name == 'default_profile')
                        column_fields.order = 4;
					var fieldSysId = new Nutanix_ConfigureSettingScripts().updateVariableTable(var_update.sys_id, column_fields, 'update');
                }
            }

            gs.setProperty("x_nuta2_nutanix_ca.1_5_1", "1");

        } catch (e) {
            this.logger.error("Exeption caught inside Migration_script.updateTheCatalogClientScriptForOneDotFiveDotOne() Error : - " + e);
        }
    },


    addEnvironmentVariableToAllCatalogs: function() {
        try {
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) >= parseFloat("3.2")) && (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {

                var mpi_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_marketplaceitems');
                mpi_cat_item.query();
                while (mpi_cat_item.next()) {
                    var grItem = new GlideRecord("item_option_new");
                    grItem.addQuery('name', 'default_environment');
                    grItem.addQuery('cat_item', mpi_cat_item.sys_id + "");
                    grItem.query();
                    if (!grItem.hasNext()) {
						var column_fields = {};
						column_fields.type = '5';
                        column_fields.cat_item = mpi_cat_item.sys_id + "";
                        column_fields.active = true;
                        column_fields.question_text = 'Environment';
                        column_fields.name = 'default_environment';
                        column_fields.order = 2;
						var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                    }
                }

                var bp_cat_item = new GlideRecord('x_nuta2_nutanix_ca_nutanix_blueprint');
                bp_cat_item.query();
                while (bp_cat_item.next()) {
                    var grItem = new GlideRecord("item_option_new");
                    grItem.addQuery('name', 'default_environment');
                    grItem.addQuery('cat_item', bp_cat_item.sys_id + "");
                    grItem.query();
                    if (!grItem.hasNext()) {
						var column_fields = {};
						column_fields.type = '5';
                        column_fields.cat_item = bp_cat_item.sys_id + "";
                        column_fields.active = true;
                        column_fields.question_text = 'Environment';
                        column_fields.name = 'default_environment';
                        column_fields.order = 2;
						var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');
                    }
                }


                var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_items.query();
                while (cat_items.next()) {
                    var grItem = new GlideRecord("item_option_new");
					var column_fields = {};
					column_fields.type = '5';
                    column_fields.cat_item = cat_items.item_name + "";
                    column_fields.active = true;
                    column_fields.question_text = 'Environment';
                    column_fields.name = 'default_environment';
                    column_fields.order = 2;
					var env_SysID = new Nutanix_ConfigureSettingScripts().updateVariableTable('', column_fields, 'insert');


                    //Creating new scripts:
                    var projectSysID = "";
                    var profileSysID = "";
                    var app_name_SysID = "";
                    var env_variable_SysID = "";
                    var grItemProf = new GlideRecord("item_option_new");
                    grItemProf.addQuery("cat_item", cat_items.item_name);
                    var qc = grItemProf.addQuery("name", "default_project");
                    qc.addOrCondition('name', 'default_profile');
                    qc.addOrCondition('name', 'default_app_name');
                    qc.addOrCondition('name', 'default_environment');
                    grItemProf.query();

                    while (grItemProf.next()) {
                        if (grItemProf.name + '' == "default_project")
                            projectSysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_profile")
                            profileSysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_app_name")
                            app_name_SysID = grItemProf.sys_id + "";
                        if (grItemProf.name + '' == "default_environment")
                            env_variable_SysID = grItemProf.sys_id + "";
                    }
                    //             gs.info("**************** projectSysID " + projectSysID + " profileSysID " + profileSysID);


                    var onChangeCatalogProject = new sn_sc.CatalogClientScript();
                    onChangeCatalogProject.setAttributes({
                        "name": "On Change of Project",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + projectSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogProject.appliesToCatalogItem(true);
                    var onChangeProjectScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == ''){return;}var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchEnvironments');ga.addParam('sysparm_cat_sys_id', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var result = JSON.parse(answer);if (result.length == 0) {g_form.hideFieldMsg('default_environment', true);g_form.clearOptions('default_environment');g_form.showFieldMsg('default_environment', 'This Project has no valid Environments configured, you cannot proceed with the launch.  Please contact your administrator'); g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');g_form.setMandatory('default_profile', true);g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) { g_form.setDisplay(elemen[i].fieldName, false);} g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{g_form.clearMessages();g_form.clearOptions('default_environment');for (var i = 0; i < result.length; i++){var jsonObj = result[i];g_form.addOption('default_environment', jsonObj.UUID + '', jsonObj.Name + '');}}}}";
                    onChangeCatalogProject.addScript(onChangeProjectScript);
                    var OnChangeCatalogScriptId = onChangeCatalogProject.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  71 " + OnChangeCatalogScriptId);



                    var onChangeCatalogEnvironment = new sn_sc.CatalogClientScript();
                    onChangeCatalogEnvironment.setAttributes({
                        "name": "On Change of Environment variable",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + env_variable_SysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of project.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangeCatalogEnvironment.appliesToCatalogItem(true);
                    var onChangeEnvironmentScript = "function onChange(control, oldValue, newValue, isLoading){if (isLoading || newValue == '') {return;} var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\";var loadingDialog = new GlideModal('environment_loader', true);loadingDialog.setTitle('Fetching Profiles...');loadingDialog.renderWithContent('' + loadingHTML);var gUrl = new GlideURL();gUrl.setFromCurrent();var def_project;for (var i = 0; i < g_form.getControl('default_project').options.length; i++){if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) {def_project = g_form.getControl('default_project').options[i].innerText;break;}}var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment');ga.addParam('sysparm_env', g_form.getValue('default_environment'));ga.addParam('sysparm_proValue', g_form.getValue('default_project'));ga.addParam('sysparm_pro', def_project + '');ga.addParam('sysparm_profile', gUrl.getParam('profileSysId'));ga.addParam('sysparm_blueprint', gUrl.getParam('uuid'));ga.addParam('sysparm_type', gUrl.getParam('type'));ga.getXML(parseData);function parseData(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(' On Change of Environment variable answer' + answer);answer = JSON.parse(answer);if (answer.length == 0) {g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile');g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment.  Please choose a different Environment to proceed.');var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, false);}g_form.setDisplay('default_profile', true);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setMandatory('default_profile', true);}else{var elemen = g_form.elements;for (var i in elemen) {g_form.setDisplay(elemen[i].fieldName, true);}g_form.hideFieldMsg('default_profile', true);g_form.clearOptions('default_profile');for (var i = 0; i < answer.length; i++) {g_form.addOption('default_profile', answer[i], answer[i]);}if (answer.length == 1) {g_form.setReadOnly('default_profile', true);}}new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();new GlideModal().get('environment_loader').destroy();var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);}function varResponse(response){var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};var var_array = [];for (var i in prof_json){var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field);parsed_field.value = curr_value; parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json){var_array = [];for (var k in serv_json[j]){var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json){var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS'){if (type == 'LOCAL') g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET'){g_form.clearOptions(sys_id);for (var k = 0; k < (row.value).length; k++){g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    onChangeCatalogEnvironment.addScript(onChangeEnvironmentScript);
                    var OnChangeCatalogScriptId = onChangeCatalogEnvironment.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  100 " + OnChangeCatalogScriptId);

                    var catalogScriptGR = new GlideRecord('catalog_script_client');
                    catalogScriptGR.addQuery('cat_item', cat_items.item_name + '');
                    catalogScriptGR.query();
                    while (catalogScriptGR.next()) {
                        //  gs.info(catalogScriptGR.name + "catalog client script updatated");
                        if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                            //                     gs.info("final If " + catalogScriptGR.name + "catalog client script updatated");
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                            this.logger.info(" final If " + catalogScriptGR.name + "catalog client script updatated");
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnChange") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Hide Order details on request") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                    }


                    var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScript.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    onLoadCatalogClientScript.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() {var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse);function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var parsed = JSON.parse(answer);var projectList = parsed.projectList;g_form.clearOptions('default_project');for (var i = 0; i < projectList.length; i++) {var project = projectList[i];g_form.addOption('default_project', project.uuid, project.name)} if (projectList.length == 1) { g_form.setReadOnly('default_project', true)}new GlideModal().get('loader').destroy();}}";
                    onLoadCatalogClientScript.addScript(onLoadScript);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    //             gs.info("catalog client script  140 " + onLoadCatalogClientScriptId);
                    if (current.variables.type_of_blueprint == 'runbook' || current.variables.type_of_blueprint == 'published_runbook') {
                        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
                        onLoadCatalogClientScript.setAttributes({
                            "name": "Get Project and Endpoint List onLoad",
                            "type": "onLoad",
                            "applies_to": "item",
                            "cat_item": '' + catItemSysId,
                            "active": "true",
                            "order": "100",
                            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                            "applies_catalog": "true",
                            "ui_type": "0",
                            "applies_req_item": false,
                            "applies_sc_task": false
                        });

                        onLoadCatalogClientScript.appliesToCatalogItem(true);
                        var onLoadScript = "function onLoad() { var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga.addParam(\'sysparm_name\', \'fetchMultipleProjectAndEndpointList\'); ga.addParam(\'sysparm_catSysID\', cat_sys_id); ga.getXML(parseResponseMultipleProjectAndEndpointList); function parseResponseMultipleProjectAndEndpointList(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; g_form.clearOptions(\'default_project\'); for (var i = 0; i < projectList.length; i++) { var project = projectList[i]; g_form.addOption(\'default_project\', project.uuid, project.name); } if (projectList.length == 1) { g_form.setReadOnly(\'default_project\', true); } var endpointList = parsed.endpointList; } var ga1 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga1.addParam(\'sysparm_name\', \'advanceVariableDynamicOptions\'); ga1.addParam(\'sysparm_catSysID\', cat_sys_id); ga1.getXML(parseResponseAdvanceVariable); function parseResponseAdvanceVariable(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var parse = JSON.parse(answer); var keys = Object.keys(parse[0]); var fieldRegex = parse[1]; parse = parse[0]; sessionStorage[\'FieldRegex_\' + g_form.getUniqueValue()] = JSON.stringify(fieldRegex); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + \'\']; if (row.options.state == \'SUCCESS\') { g_form.clearOptions(keys[i] + \'\'); for (var k = 0; k < (row.options.values).length; k++) { g_form.addOption(keys[i] + \'\', row.options.values[k], row.options.values[k]); } } else { g_form.addErrorMessage(\'Error in variable: \' + keys[i] + \': \' + row.options.values[0]); } } } var ga2 = new GlideAjax(\'x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge\'); ga2.addParam(\'sysparm_name\', \'fetchOrderFormData\'); ga2.addParam(\'sysparm_profile\', \'runbook\'); ga2.addParam(\'sysparm_catSysID\', cat_sys_id); ga2.getXML(parseResponseOrderFormData); function parseResponseOrderFormData(response) { var answer = response.responseXML.documentElement.getAttribute(\'answer\'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + \'\'] = elemen[i].type + \'\'; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + \'\'] = fldType[flds[i].realName + \'\'] + \'\'; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf(\'cluster_name\') == -1) { if (nameTypeMap[i + \'\'] + \'\' == \'masked\') { fielVal[i] = parsed[i].value; g_form.setValue(i + \'\', \'\'); } else { g_form.setValue(i + \'\', parsed[i].value + \'\'); } g_form.setReadOnly(i + \'\', parsed[i].readOnly + \'\'); g_form.setDisplay(i + \'\', !parsed[i].readOnly); } else { g_form.setDisplay(i + \'\', !parsed[i].readOnly); g_form.setReadOnly(i + \'\', true); } } sessionStorage[\'fieldValues_\' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } }";
                        onLoadCatalogClientScript.addScript(onLoadScript);
                        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
                        var gr = new GlideRecord('catalog_script_client');
                        if (gr.get(onLoadCatalogClientScriptId)) {
                            gr.setValue("sys_scope", "global");
                            gr.update();
                        }
                    }
                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading ) { return; } if(newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true);g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); } else { g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference && credential.credential_reference.name) { g_form.setDisplay(name + '_credential_reference', 'true'); g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + ''); g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly); g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } }}";
                    catalogScriptGR.addScript(script);
                    var ScriptId = catalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(ScriptId)) {
                        gr.setValue("sys_scope", "global");

                        gr.update();
                    }

                    //   gs.info("catalog client script  170 " + ScriptId);

                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "cat_variable": "IO:" + app_name_SysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[\_\-\w ]+$/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j < n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') && j == n - 1 && listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') && value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value && row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  && flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  && flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onSubmitcatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": "0",
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                }
                this.fetchValuesOnChangeClientScript();

            }
            if ((parseFloat(gs.getProperty('x_nuta2_nutanix_ca.calm_version')) < parseFloat("3.2")) && (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {

                var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
                cat_items1.query();
                while (cat_items1.next()) {


                    var grItemProf1 = new GlideRecord("item_option_new");
                    grItemProf1.addQuery("cat_item", cat_items1.item_name);
                    var qc = grItemProf1.addQuery("name", "default_profile");
                    qc.addOrCondition('name', 'default_app_name');
                    grItemProf1.query();
                    var profileSysID, appSysID;
                    while (grItemProf1.next()) {
                        if (grItemProf1.name + '' == "default_profile")
                            profileSysID = grItemProf1.sys_id + "";
                        if (grItemProf1.name + '' == "default_app_name")
                            appSysID = grItemProf1.sys_id + "";
                    }


                    var catalogScriptGR = new GlideRecord('catalog_script_client');
                    catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
                    catalogScriptGR.query();
                    while (catalogScriptGR.next()) {
                        if (catalogScriptGR.name + '' == "Fetch dependencies on change of profile") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnChange") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Check AppName OnSubmit") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                        if (catalogScriptGR.name + '' == "Hide Order details on request") {
                            var catalogClientScript = new sn_sc.CatalogClientScript();
                            catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                        }
                    }


                    var catalogScriptGR = new sn_sc.CatalogClientScript();
                    catalogScriptGR.setAttributes({
                        "name": "Fetch form data on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 100,
                        "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    catalogScriptGR.appliesToCatalogItem(true);
                    var script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Credentials List...'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer);for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_');g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) {g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false');}g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference && credential.credential_reference.name) {g_form.setDisplay(name + '_credential_reference', 'true');g_form.addOption(name + '_credential_reference', credential.credential_reference.uuid + '', credential.credential_reference.name + '');g_form.setReadOnly(name + '_credential_reference', credential.credential_reference.readOnly);g_form.setDisplay(name + '_credential_reference', !credential.credential_reference.readOnly);g_form.setDisplay(name + '_ssh_private_key', 'false');g_form.setDisplay(name + '_passphrase', 'false');g_form.setDisplay(name + '_password', 'false');g_form.setDisplay(name + '_secret_type', 'false');}} sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy();}}}";
                    catalogScriptGR.addScript(script);
                    var ScriptId = catalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(ScriptId)) {
                        gr.setValue("sys_scope", "global");

                        gr.update();
                    }


                    var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript3.setAttributes({
                        "name": "Fetch dependencies on change of profile",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + profileSysID,
                        "active": true,
                        "order": 700,
                        "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript3.appliesToCatalogItem(true);
                    var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
                    onChangecatalogClientScript3.addScript(onChangeScriptVars);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var project_load = new sn_sc.CatalogClientScript();
                    project_load.setAttributes({
                        "name": "Get Project and Profile List onLoad",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": "true",
                        "order": "100",
                        "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false
                    });
                    project_load.appliesToCatalogItem(true);
                    var onLoadScript = "function onLoad() { var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i < projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i < profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k < (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
                    project_load.addScript(onLoadScript);
                    var project_load_ScriptId = project_load.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(project_load_ScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Check AppName OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + appSysID,
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,

                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var name = newValue; if ((newValue.length != ((newValue.trim()).length))  || (!(/^[_-\\w ]+$/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1))))) {g_form.clearValue('default_app_name'); g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and in between spaces are allowed and cannot end with hyphens(-). Leading and trailing spaces are not allowed.');}}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }


                    var onSubmitcatalogScriptGR = new sn_sc.CatalogClientScript();
                    onSubmitcatalogScriptGR.setAttributes({
                        "name": "Check AppName OnSubmit",
                        "type": "onSubmit",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": true,
                        "order": 100,
                        "description": "This script is auto created thorugh runtime module for checking application name on submit.",
                        "applies_catalog": true,
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onSubmitcatalogScriptGR.appliesToCatalogItem(true);
                    var onSubmitscript = "function onSubmit() { var result = true; var name = g_form.getValue('default_app_name'); if (!(/^[_-\\w ]+$/.test(name) && (name.trim().lastIndexOf('-') != (name.trim().length - 1)))) { g_form.showErrorBox('default_app_name', 'Only alphanumeric characters, underscores(_), hyphens(-) and spaces are allowed and cannot end with hyphens(-).'); result = false; } var errorFieldName = ''; var errorIntFieldName = ''; var parse = JSON.parse(sessionStorage.getItem('FieldRegex_' + g_form.getUniqueValue())); var keys = Object.keys(parse); for (var i = 0; i < keys.length; i++) { var row = parse[keys[i] + '']; var patt = row.regex + ''; var reg = new RegExp(patt); var value = g_form.getValue(keys[i] + ''); var dataType = (row.data_type + '' == 'EXEC_SECRET' || row.data_type + '' == 'HTTP_SECRET' || row.data_type + '' == 'EXEC_LOCAL' || row.data_type + '' == 'HTTP_LOCAL') ? 'Dynamic' : row.data_type + ''; if (row.type + '' == 21) { var splitted = value.split(','); var actualVal = row.listRegex; var count = 0; for (var j = 0, n = splitted.length; j < n; j++) { var listVal = actualVal[splitted[j] + ''];  if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') && j == n - 1 && listVal.includes('\n')){ while(listVal.indexOf('\n') != -1){ listVal = listVal.replace('\n','');} if (reg.test(listVal)) { count++;} } if (count == n) row.status = true; } else { if ((dataType + '' == 'Dynamic' || dataType + '' == 'PREDEFINED') && value.includes('\n')){while(value.indexOf('\n') != -1){value = value.replace('\n','');}} if (reg.test(value)) { row.status = true; } } if (value && row.status == false) { result = false; g_form.hideFieldMsg(keys[i] + ''); if(dataType == ''){ errorIntFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'This is a Integer field.Please provide a integer value.'); } else{ errorFieldName += g_form.getLabelOf(keys[i] + '') + ','; g_form.showErrorBox(keys[i] + '', 'Value does not match specified regex: ' + row.regex); } }} if (result) {   var parse = JSON.parse(sessionStorage.getItem('fieldValues_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 			 parse = JSON.parse(sessionStorage.getItem('credentials_' + g_form.getUniqueValue())); for(var i in parse){ if(g_form.getValue(i)+''=='') g_form.setValue(i, parse[i]); } 		 sessionStorage.removeItem('fieldValues_' + g_form.getUniqueValue()); sessionStorage.removeItem('credentials_' + g_form.getUniqueValue());      sessionStorage.removeItem('clusterName_' + g_form.getUniqueValue()); sessionStorage.removeItem('FieldRegex_' + g_form.getUniqueValue());var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\" ;var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Validating field value with regex..'); loadingDialog.renderWithContent(''+loadingHTML);} else { errorIntFieldName = (errorIntFieldName.endsWith(',')) ? errorIntFieldName.substr(0, errorIntFieldName.length - 1) : errorIntFieldName; errorFieldName = (errorFieldName.endsWith(',')) ? errorFieldName.substr(0, errorFieldName.length - 1) : errorFieldName; if(errorIntFieldName != '' ) g_form.addErrorMessage('Variables are Integer field.Please provide suitable values: ' + errorIntFieldName); if(errorFieldName != '' ) g_form.addErrorMessage('Variables value does not match specified Regex.Please provide suitable values: ' + errorFieldName); new GlideModal().get('loader').destroy(); return false; }var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (g_form.getValue('default_profile')+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }if(flds[i].label == \"Project\"  && flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  && flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);  /*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; 	*/			} }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   }}";
                    onSubmitcatalogScriptGR.addScript(onSubmitscript);
                    var onSubmitcatalogScriptId = onSubmitcatalogScriptGR.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(onSubmitcatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }
                    var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
                    onLoadCatalogClientScriptGR.setAttributes({
                        "name": "Hide Order details on request",
                        "type": "onLoad",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "active": true,
                        "order": 10,
                        "description": "Hide values on request details.",
                        "applies_catalog": "false",
                        "ui_type": "0",
                        "applies_req_item": "true",
                        "applies_sc_task": "false"
                    });
                    onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
                    onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
                    var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
                    onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
                    var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
                    if (gr.get(onLoadCatalogClientScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                }
                this.fetchValuesOnChangeClientScript();
            }
            gs.setProperty('x_nuta2_nutanix_ca.1_4_4', '1');
        } catch (e) {
            this.logger.error("Exception caught inside migraation_script.addEnvironmentVariableToAllCatalogs : " + e);
        }
    },

    isCatalogItemsAvailable: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.query();
        if (cat_items.hasNext() && (gs.getProperty('x_nuta2_nutanix_ca.1_4_4') == '0')) {
            this.logger.info("Migration to V 1_4_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4_4 not require");
        return false;
    },
    fetchValuesOnChangeClientScript: function() {

        var cat_items1 = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items1.query();
        while (cat_items1.next()) {

            var catalogScriptGR = new GlideRecord('catalog_script_client');
            catalogScriptGR.addQuery('cat_item', cat_items1.item_name + '');
            catalogScriptGR.query();
            while (catalogScriptGR.next()) {
                if (catalogScriptGR.name + '' == "Fetch values OnChange") {

                    var field = (catalogScriptGR.cat_variable + '').replace("IO:", '');

                    var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
                    onChangecatalogClientScript.setAttributes({
                        "name": "Fetch values OnChange",
                        "type": "onChange",
                        "applies_to": "item",
                        "cat_item": cat_items1.item_name + '',
                        "cat_variable": "IO:" + field,
                        "active": true,
                        "order": 1000,
                        "description": "This script is auto created thorugh runtime module for fetching values.",
                        "applies_catalog": "true",
                        "ui_type": "0",
                        "applies_req_item": false,
                        "applies_sc_task": false,
                    });
                    onChangecatalogClientScript.appliesToCatalogItem(true);
                    var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&& (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k<row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&&g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
                    onChangecatalogClientScript.addScript(onChangeScript);
                    var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
                    var gr = new GlideRecord('catalog_script_client');
                    if (gr.get(OnChangeCatalogScriptId)) {
                        gr.setValue("sys_scope", "global");
                        gr.update();
                    }

                    var catalogClientScript = new sn_sc.CatalogClientScript();
                    catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
                }

            }
        }

    },
    isMigrationNeeded: function() {
        var cat_items = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        cat_items.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        cat_items.query();
        if (cat_items.hasNext()) {
            this.logger.info("Migration to V 1_4 require");
            return true;
        }
        this.logger.info("Migration to V 1_4 not require");
        return false;
    },

    updateCatalog: function() {
        this.logger.info("Migration to V1_4 Started");

        gs.setProperty('x_nuta2_nutanix_ca.migration.script.ran', 'true');

        this.catalogItem_1_4();
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.query();
        while (gr.next()) {
            try {
                this.clientScript_1_4(gr.item_name);
                this.logger.info(gr.item_name.name + " Catalog client script succesfully migrated.");
            } catch (e) {
                this.logger.error(gr.item_name.name + " Catalog Item was not migrated due to issue in catalog client script.");
            }
        }
    },


    clientScript_1_4: function(catSysId) {
        var catalogScriptGR = new GlideRecord(this.appUtil.configuration.table.catalogClientScript + '');
        catalogScriptGR.addQuery('cat_item', catSysId);
        catalogScriptGR.query();
        this.logger.info("ctalog client Script " + catalogScriptGR.getRowCount() + "to be updatated");
        while (catalogScriptGR.next()) {
            this.logger.info(catalogScriptGR.name + "catalog client script updatated");
            if (catalogScriptGR.name + '' == "Fetch form data on change of profile") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);

            }
            if (catalogScriptGR.name + '' == "Get Project and Profile List onLoad") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Hide Order details on request") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Get Subnet Info on project change") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }
            if (catalogScriptGR.name + '' == "Check Catalog Item Validity") {
                this.logger.info("If " + catalogScriptGR.name + "catalog client script updatated");
                var catalogClientScript = new sn_sc.CatalogClientScript();
                catalogClientScript.deleteRecord(catalogScriptGR.sys_id);
            }

        }
        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var catalogScriptGR = new sn_sc.CatalogClientScript();
        catalogScriptGR.setAttributes({
            "name": "Fetch form data on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": "" + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 100,
            "description": 'This script is auto created thorugh runtime module for fetching and setting form data and visibility.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        catalogScriptGR.appliesToCatalogItem(true);
        var Script = "function onChange(control, oldValue, newValue, isLoading) {if (newValue == '') {return;} var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialogbox = new GlideModal('loader', true);loadingDialogbox.setTitle('Fetching Order Form Data...'); loadingDialogbox.renderWithContent(''+loadingHTML);var fldType = {};var elemen = g_form.elements;for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;} g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = newValue;var cat_sys_id = g_form.getUniqueValue();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile);ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse, null, loadingDialogbox);function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer');   var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; }  var nameTypeMap = {}; var flds = g_form.nameMap; for(var i in flds){ nameTypeMap[flds[i].prettyName+''] = fldType[flds[i].realName+'']+''; } 		  var fielVal = {};  var parsed = JSON.parse(answer);for (var i in parsed) {if(i.indexOf('cluster_name') == -1){ if(nameTypeMap[i+'']+'' == 'masked'){ fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else{ g_form.setValue(i + '', parsed[i].value + ''); }			 g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly);	 }else{ g_form.setDisplay(i + '', !parsed[i].readOnly);	 g_form.setReadOnly(i + '', true);	 			}		}   sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);		  new GlideModal().get('loader').destroy();}} var cat_sys_id = g_form.getUniqueValue();	var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList');ga.addParam('sysparm_catSysID', cat_sys_id);ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer); var projectList = parsed.projectList; if (projectList.length == 1) { g_form.setReadOnly('default_project', true);}}";
        catalogScriptGR.addScript(Script);
        var ScriptId = catalogScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Fetch form data on change of profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(ScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Get Project and Profile List onLoad",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": "true",
            "order": "100",
            "description": "This script is auto created thorugh runtime module for getting projects and profile list.",
            "applies_catalog": "true",
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onLoad() { var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching Project And Profile'); loadingDialog.renderWithContent(''+loadingHTML); var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProjectAndProfileList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null , loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var parsed = JSON.parse(answer);var projectList = parsed.projectList; g_form.clearOptions('default_project');for (var i = 0; i < projectList.length; i++) { var project = projectList[i]; g_form.addOption('default_project', project.uuid, project.name);}var profileList = parsed.profileList.split(','); g_form.clearOptions('default_profile'); for (i = 0; i < profileList.length; i++) { g_form.addOption('default_profile', profileList[i] + '', profileList[i] + ''); } g_form.setValue('default_profile', profileList[0]);if (projectList.length == 1) { g_form.setReadOnly('default_project', true);} if (profileList.length == 1) { g_form.setReadOnly('default_profile', true);} new GlideModal().get('loader').destroy();var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\";var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id = g_form.getUniqueValue();var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse, null, loadingDialog);}function varResponse(response, loadingDialog) {var answer = response.responseXML.documentElement.getAttribute('answer');var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service; var sess_json = {};var var_array = [];for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:'+i] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);for (var j in serv_json) {var_array = [];for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:'+k] = curr_value;var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(sess_json);}}function getAdvancedVars(variable_json) {var act_var_JSON = JSON.stringify(variable_json);var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name', 'variableArrayParser');gajax.addParam('sysparm_type', 'catalog');gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + '');gajax.addParam('sysparm_varJson', act_var_JSON);gajax.getXML(getVarResponse);}function getVarResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null')return;var parsedResponse = JSON.parse(answer);for (var i in parsedResponse) {var row = parsedResponse[i];var sys_id = 'IO:' + row.sys_id;var type = row.type + '';if (row.state == 'SUCCESS') {if(type == 'LOCAL')g_form.setValue(sys_id, row.value);if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') {g_form.clearOptions(sys_id);for (var k = 0; k < (row.value).length; k++) {g_form.addOption(sys_id + '', row.value[k], row.value[k]);}}}if (row.state == 'ERROR') {g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]);}}}";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Project and Profile List onLoad\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onLoadCatalogClientScriptGR = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScriptGR.setAttributes({
            "name": "Hide Order details on request",
            "type": "onLoad",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "active": true,
            "order": 10,
            "description": "Hide values on request details.",
            "applies_catalog": "false",
            "ui_type": "0",
            "applies_req_item": "true",
            "applies_sc_task": "false",
            "sys_scope": "global"
        });
        onLoadCatalogClientScriptGR.appliesToCatalogItem(false);
        onLoadCatalogClientScriptGR.appliesToRequestedItem(true);
        var onLoadScriptHide = "function onLoad() {if(g_form.getTableName() + '' == 'sc_req_item') {var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var flds = g_form.nameMap;for (var i in flds) {if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') {continue;}g_form.setDisplay(flds[i].prettyName, false);}g_form.setVariablesReadOnly(true);g_form.setDisplay('provider_icons', 'false');g_form.setReadOnly('default_project', false);g_form.setReadOnly('default_environment', false);g_form.setReadOnly('default_app_name', false);g_form.setReadOnly('default_profile', false);g_form.setDisplay('default_project', true);g_form.setDisplay('default_environment', true);g_form.setDisplay('default_app_name', true);g_form.setDisplay('default_profile', true);var profile = g_form.getValue('default_profile') + '';var cat_sys_id = g_form.getValue('cat_item') + '';var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchOrderFormData');ga.addParam('sysparm_profile', profile + '');ga.addParam('sysparm_catSysID', cat_sys_id + '');ga.getXML(parseResponse);} function parseResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');var fldType = {};var elemen = g_form.elements;for (var i in elemen) {fldType[elemen[i].fieldName + ''] = elemen[i].type + '';}var nameTypeMap = {};var flds = g_form.nameMap;for (var i in flds) {nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + '';}var fielVal = {};var parsed = JSON.parse(answer);for (var i in parsed) {if (i.indexOf('cluster_name') == -1) {if (nameTypeMap[i + ''] + '' == 'masked') {fielVal[i] = parsed[i].value;g_form.setValue(i + '', '');}g_form.setReadOnly(i + '', true); g_form.setDisplay(i + '', !parsed[i].readOnly);} else {g_form.setDisplay(i + '', !parsed[i].readOnly);g_form.setReadOnly(i + '', true);}}sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal);}}";
        onLoadCatalogClientScriptGR.addScript(onLoadScriptHide);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScriptGR.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Hide values on request details.\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        /*Insert new Scripts Get Subnet Info on project change*/
        var oldGR = new GlideRecord('item_option_new');
        oldGR.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        oldGR.query();
        oldGR.next();
        var onChangecatalogClientScript1 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript1.setAttributes({
            "name": "Get Subnet Info on project change",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + oldGR.sys_id,
            "active": true,
            "order": 600,
            "description": "This script is auto created thorugh runtime module for checking application name on submit.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript1.appliesToCatalogItem(true);
        var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if (newValue == '') { return; }var clusterJSON = {}; var catalogSysId = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getSubnet');ga.addParam('sysparm_catSysID', catalogSysId);ga.addParam('sysparm_ProjectUuid', newValue);ga.getXML(processAnswer);function processAnswer(response) {var ans = response.responseXML.documentElement.getAttribute('answer');sessionStorage['clusterName_' + g_form.getUniqueValue()] = ans;ans = JSON.parse(ans);var catalog_clusterJSON = ans.catalog_data;clusterJSON = ans.cluster_info;var nicList = [];for(var m in clusterJSON){nicList.push(clusterJSON[m].subnet);}for (var k in catalog_clusterJSON) {for (var i in catalog_clusterJSON[k].nics) {if (catalog_clusterJSON[k].value + '') {for (var l in clusterJSON) {var subnetList = clusterJSON[l].subnet;if (l != catalog_clusterJSON[k].value + '')for (var s in subnetList){ /*g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', s);*/}}}{var opt = g_form.getElement(catalog_clusterJSON[k].nics[i] + '');for (var x=1, n = opt.options.length; x < n; x++) {var present = false;var val = opt.options[x].value+'';for(var s=0; s < nicList.length ;s++){if (nicList[s][val]) {present =true;break;}} if(!present){g_form.removeOption(catalog_clusterJSON[k].nics[i] + '', opt.options[x].value+''); x--;n--; } }} }}}}";
        onChangecatalogClientScript1.addScript(onChangeScript);
        var OnChangeCatalogScriptId = onChangecatalogClientScript1.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Get Subnet Info on project change\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var projectSysID = new GlideRecord('item_option_new');
        projectSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_project');
        projectSysID.query();
        projectSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity project",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + projectSysID,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+''; var profileName = (g_form.getValue('default_profile')+'').trim();if(profileName == '') return;var projectUUID = (newValue+'').trim();if(projectUUID == '')return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName); ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; }  if(flds[i].label == \"Project\"  && flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  && flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/* self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; */			}	 }  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity project\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();
        var onLoadCatalogClientScript = new sn_sc.CatalogClientScript();
        onLoadCatalogClientScript.setAttributes({
            "name": "Check Catalog Item Validity profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 1,
            "description": 'This script is auto created thorugh runtime module for checking BP validity from which this catalog item was created.',
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onLoadCatalogClientScript.appliesToCatalogItem(true);
        var onLoadScript = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') { return;} var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Checking Blueprint Status...'); loadingDialog.renderWithContent(''+loadingHTML); var blueprintType = getParameterValue('type')+''; var blueprintUUID = getParameterValue('uuid')+''; var profileSysId = getParameterValue('profileSysId')+'';var profileName = (newValue+'').trim(); if(profileName == '') return; var projectUUID = (g_form.getValue('default_project')+'').trim(); if(projectUUID == '') return; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'checkCatalogValidity'); ga.addParam('blueprintType', blueprintType); ga.addParam('blueprintUUID', blueprintUUID); ga.addParam('profileSysId', profileSysId); ga.addParam('projectUUID', projectUUID); ga.addParam('profileName', profileName);ga.getXML(parseResponse, null, loadingDialog); function parseResponse(response, loadingDialog) { var answer = response.responseXML.documentElement.getAttribute('answer'); var message=''; if (answer + '' == 'INACTIVE') { message= 'Project/Profile/Blueprint/MPI is not available at Calm. So, Catalog Item can\\'t be launched. Re-Directing back to catalog launch page.'; clearFieldValue(message); } else if (answer + '' == 'CANTCHECK') { message='Can\\'t check whether the Project/Profile/BP/MPI from which the catalog item was created is available or not. Please check the connection with Calm. Re-Directing back to catalog launch page.'; clearFieldValue(message); } new GlideModal().get('loader').destroy(); }  function clearFieldValue(message){ var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } alert(message); var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if(flds[i].label == \"Project\"  && flds[i].prettyName == \"default_project\")continue;if(flds[i].label == \"Profile\"  && flds[i].prettyName == \"default_profile\")continue;if (flds[i].prettyName.indexOf('cluster_name') == -1) g_form.clearValue(flds[i].prettyName);/*	 self.location = '/x_nuta2_nutanix_ca_nutanix_runtime_configuration_list.do?sysparm_userpref_module=29d7d2e54f41230065e48020a310c7f6&sysparm_view=catalog_view&sysparm_query=GROUPBYitem_name.category&sysparm_clear_stack=true'; 	*/			 }}  function getParameterValue(name) {   name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");   var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";   var regex = new RegExp(regexS);   var results = regex.exec(self.location);   if (results == null) {   return \"\";   } else {   return unescape(results[1]);   }   } }";
        onLoadCatalogClientScript.addScript(onLoadScript);
        var onLoadCatalogClientScriptId = onLoadCatalogClientScript.create();
        this.logger.info("V1.4 migration, " + catSysId + " \'Check Catalog Item Validity profile\' catalog client script created.");
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(onLoadCatalogClientScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }


    },

    catalogItem_1_4: function() {
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addEncodedQuery('multiple_application_profileISEMPTY^multiple_projectsISEMPTY^state=active^ORstate=draft');
        gr.query();
        while (gr.next()) {
            try {
                gr.multiple_projects = gr.project;
                gr.multiple_application_profile = gr.application_profile;
                gr.update();
                this.logger.info("V1.4 migration, " + gr.item_name.name + " Catalog Item was migrated.");
            } catch (e) {
                this.logger.error("V1.4 migration, " + gr.item_name.name + " Catalog Item was not migrated due to issue in some field type and the value it contained.");
            }
        }
    },

    copyFieldJson: function() {

        this.logger.info("V1.4 migration: Migrating old variables");
        var gr = new GlideRecord('x_nuta2_nutanix_ca_nutanix_runtime_configuration');
        gr.addQuery("state", "active");
        gr.query();
        while (gr.next()) {
            this._createOnChangeSessionScript(gr.item_name.sys_id);
            var grVars = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
            grVars.addEncodedQuery('catalog_item=' + gr.item_name.sys_id + '^isprofilevariable=true^ORisservicevariable=true');
            grVars.query();
            while (grVars.next()) {
                var grVarsBp = new GlideRecord('x_nuta2_nutanix_ca_catalog_variables_properties');
                grVarsBp.addQuery('catalog_item', gr.blueprint + "");
                grVarsBp.addQuery('uuid', grVars.uuid + "");
                grVarsBp.query();
                if (grVarsBp.next()) {
                    this._createOnChangeScript(grVars.variable.sys_id + "", gr.item_name.sys_id + "");
                    grVars.field_json = grVarsBp.field_json + '';
                    grVars.update();
                }
            }
        }

    },

    _createOnChangeSessionScript: function(catSysId) {

        var profileSysID = new GlideRecord('item_option_new');
        profileSysID.addEncodedQuery('cat_item=' + catSysId + '^nameLIKEdefault_profile');
        profileSysID.query();
        profileSysID.next();

        var onChangecatalogClientScript3 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript3.setAttributes({
            "name": "Fetch dependencies on change of profile",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for getting variables on change of profile.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,

        });
        onChangecatalogClientScript3.appliesToCatalogItem(true);
        var onChangeScriptVars = "function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var cat_sys_id = g_form.getUniqueValue(); var profile = (newValue + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse);}function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); console.log(answer); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json);}function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.getXML(getVarResponse);}function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undeined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) {var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } new GlideModal().get('variables_loader').destroy(); }}";
        onChangecatalogClientScript3.addScript(onChangeScriptVars);
        var OnChangeCatalogScriptId = onChangecatalogClientScript3.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        var onChangecatalogClientScript2 = new sn_sc.CatalogClientScript();
        onChangecatalogClientScript2.setAttributes({
            "name": "Set Session Vars",
            "type": "onChange",
            "applies_to": "item",
            "cat_item": '' + catSysId,
            "cat_variable": "IO:" + profileSysID.sys_id,
            "active": true,
            "order": 700,
            "description": "This script is auto created thorugh runtime module for setting session json.",
            "applies_catalog": true,
            "ui_type": "0",
            "applies_req_item": false,
            "applies_sc_task": false,
            "sys_scope": "global"
        });
        onChangecatalogClientScript2.appliesToCatalogItem(true);
        var onChangeScriptSess = "function onChange(control, oldValue, newValue, isLoading) {if (isLoading || newValue == '') {return;}var cat_sys_id = g_form.getUniqueValue();var profile = (newValue + '').trim();var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name', 'fetchLaunchVars');ga.addParam('sysparm_catsysid', cat_sys_id);ga.addParam('sysparm_profile', profile);ga.getXML(varResponse);function varResponse(response) {var answer = response.responseXML.documentElement.getAttribute('answer');jslog(answer);var varJSON = JSON.parse(answer);var prof_json = varJSON.profile;var serv_json = varJSON.service;var sess_json = {};for (var i in prof_json) {var field = prof_json[i];var curr_value = g_form.getValue('IO:' + i);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = i + '';sess_json['IO:' + i] = curr_value;}for (var j in serv_json) {for (var k in serv_json[j]) {var field = serv_json[j][k];var curr_value = g_form.getValue('IO:' + k);var parsed_field = JSON.parse(field);parsed_field.value = curr_value;parsed_field.sys_id = k + '';sess_json['IO:' + k] = curr_value;}}sessionStorage['varValues'] = JSON.stringify(sess_json);}}";
        onChangecatalogClientScript2.addScript(onChangeScriptSess);
        var OnChangeCatalogScriptId = onChangecatalogClientScript2.create();
        var gr = new GlideRecord('catalog_script_client');
        if (gr.get(OnChangeCatalogScriptId)) {
            gr.setValue("sys_scope", "global");
            gr.update();
        }

        this.logger.debug("Created onChange script to set Session variables ");
    },

    _createOnChangeScript: function(varSysId, catSysId) {
        try {
            this.logger.info("V1.4 migration: Creating onChange Scripts");
            var onChangecatalogClientScript = new sn_sc.CatalogClientScript();
            onChangecatalogClientScript.setAttributes({
                "name": "Fetch values OnChange",
                "type": "onChange",
                "applies_to": "item",
                "cat_item": '' + catSysId,
                "cat_variable": "IO:" + varSysId,
                "active": true,
                "order": 100,
                "description": "This script is auto created thorugh runtime module for fetching values.",
                "applies_catalog": "true",
                "ui_type": "0",
                "applies_req_item": false,
                "applies_sc_task": false,
                "sys_scope": "global"
            });
            onChangecatalogClientScript.appliesToCatalogItem(true);
            var onChangeScript = "function onChange(control, oldValue, newValue, isLoading) { if(!sessionStorage['varValues'])return; var varValues = JSON.parse(sessionStorage['varValues']);oldValue = varValues[control.id + '']; if (isLoading || newValue == '' || oldValue + '' == newValue + '') {new GlideModal().get('loader').destroy(); return; }jslog(oldValue);jslog(newValue); function varResponse(response,loadingDialog){var answer=response.responseXML.documentElement.getAttribute('answer');var varJSON=JSON.parse(answer);var prof_json=varJSON.profile;var serv_json=varJSON.service;var var_array=[];for(var i in prof_json){var field=prof_json[i];var curr_value=g_form.getValue('IO:'+i);varValues['IO:' + i] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=i+'',var_array.push(parsed_field);}getAdvancedVars(var_array);for(var j in serv_json){var_array=[];for(var k in serv_json[j]){var field=serv_json[j][k];var curr_value=g_form.getValue('IO:'+k);varValues['IO:' + k] = curr_value + '';var parsed_field=JSON.parse(field); parsed_field.def_val = parsed_field.value + ''; parsed_field.value=curr_value,parsed_field.sys_id=k+'',var_array.push(parsed_field);}getAdvancedVars(var_array);}sessionStorage['varValues'] = JSON.stringify(varValues);}function getAdvancedVars(variable_json){var act_var_JSON=JSON.stringify(variable_json);var gajax=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');gajax.addParam('sysparm_name','variableArrayParser'),gajax.addParam('sysparm_type','catalog'),gajax.addParam('sysparm_parentUuid',g_form.getUniqueValue()+''),gajax.addParam('sysparm_varJson',act_var_JSON),gajax.getXML(getVarResponse);}function getVarResponse(response){ new GlideModal().get('loader').destroy(); var answer=response.responseXML.documentElement.getAttribute('answer');if(answer+''==''||answer+''=='undefined'||answer+''=='null')return;var parsedResponse=JSON.parse(answer);for(var i in parsedResponse){var row=parsedResponse[i];var sys_id='IO:'+row.sys_id;var type=row.type+'';if(row.state=='SUCCESS'&& (type=='EXEC_LOCAL'||type=='HTTP_LOCAL'||type=='EXEC_SECRET'||type=='HTTP_SECRET')){g_form.clearOptions(sys_id);for(var k=0;k<row.value.length;k++)g_form.addOption(sys_id+'',row.value[k],row.value[k]); g_form.setValue(sys_id,row.value);} else {if(row.data_type + '' != 'BASE'){g_form.clearOptions(sys_id); for (var k = 0; k < row.options.length; k++) g_form.addOption(sys_id + '', row.options[k], row.options[k]);} g_form.setValue(sys_id, row.value);}row.state=='ERROR'&&g_form.addErrorMessage('Error in variable: '+row.name+': '+row.error[0]);}}var loadingHTML=\"<div class=\'loading-container\'><div class=\'loading-indicator icon-loading icon-lg\'></div></div>\"; var loadingDialog = new GlideModal('loader', true); loadingDialog.setTitle('Fetching variables...'); loadingDialog.renderWithContent(''+loadingHTML);var cat_sys_id=g_form.getUniqueValue();var profile=g_form.getValue('default_profile').trim();var ga=new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge');ga.addParam('sysparm_name','fetchLaunchVars'),ga.addParam('sysparm_catsysid',cat_sys_id),ga.addParam('sysparm_profile',profile),ga.getXML(varResponse,null,loadingDialog);}";
            onChangecatalogClientScript.addScript(onChangeScript);
            var OnChangeCatalogScriptId = onChangecatalogClientScript.create();
            this.logger.info("V1.4 migration, " + catSysId + " Fetch values OnChange catalog client script created.");
            var gr = new GlideRecord('catalog_script_client');
            if (gr.get(OnChangeCatalogScriptId)) {
                gr.setValue("sys_scope", "global");
                gr.update();
            }
        } catch (e) {
            this.logger.error("Exception caught inside Migration_Script._createOnChangeScript. Error:- " + e);
        }
    },

    type: 'Migration_Script'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-09-11 10:09:24</sys_created_on>
        <sys_id>caeab4864f337300d8494ebf9310c73e</sys_id>
        <sys_mod_count>295</sys_mod_count>
        <sys_name>Migration_Script</sys_name>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>sys_script_include_caeab4864f337300d8494ebf9310c73e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-05-03 07:25:26</sys_updated_on>
    </sys_script_include>
</record_update>
