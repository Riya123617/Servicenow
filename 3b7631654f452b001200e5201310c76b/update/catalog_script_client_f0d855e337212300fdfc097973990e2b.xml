<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Configure Calm Settings">6ddd772a37112300fdfc097973990e01</cat_item>
        <cat_variable/>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>false</isolate_script>
        <messages/>
        <name>Set Fields Value</name>
        <order>100</order>
        <script><![CDATA[function onLoad() {
	//Type appropriate comment here, and begin script below
	if(g_form.getValue('blueprint_data') != "") {
		var selected_data = JSON.parse(g_form.getValue('blueprint_data'));
	
		g_form.addOption('blueprint', selected_data.blueprint, selected_data.blueprint_name);	
	}
	var performAction = (g_form.getValue('type'))?g_form.getValue('type'):getParameterValue('performAction')+'';

	if(getParameterValue('performAction')+''){
		g_form.setValue('type', performAction);

		g_form.setValue('url', (self.location+'').split('&b&')[0]);	


		var blueprintType = g_form.getValue('type_of_blueprint');

		var loadingHTML= "<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'></div></div>";
		var loadingDialog = new GlideModal("loader", true);
		loadingDialog.setTitle('Fetching Blueprints...'); //Set the loading dialog title here...
		loadingDialog.renderWithContent(''+loadingHTML);

		var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
		ga.addParam('sysparm_name', 'fetchMultipleBlueprints');
		ga.addParam('sysparm_blueprintType', blueprintType);
		ga.getXML(processProject, null, loadingDialog);

		function processProject(response, loadingDialog) {
			var answer = response.responseXML.documentElement.getAttribute("answer");
			var blueprintsList = JSON.parse(answer);

			g_form.clearOptions('blueprint');
			g_form.clearValue('multiple_project');
			g_form.clearValue('multiple_application_profile');
			g_form.clearValue('endpoint');

			for(var i in blueprintsList){
				var blueprint = blueprintsList[i];
				g_form.addOption('blueprint', blueprint.sys_id, blueprint.name);
			}

			new GlideModal().get("loader").destroy();

			if( performAction == 'update'){
				var loadingHTML= "<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'></div></div>";
				var loadingDialog = new GlideModal('loader', true);
				loadingDialog.setTitle('Fetching runtime variables value...'); //Set the loading dialog title here...
				loadingDialog.renderWithContent(''+loadingHTML);

				var sysId = getParameterValue('sys_id')+'';


				var ga = new GlideAjax('Nutanix_ClientServerScriptBridge');
				ga.addParam('sysparm_name', 'fetchRuntimeVariablesValue');
				ga.addParam('sysparm_sysId', sysId);
				ga.getXML(processResponse, null, loadingDialog);

				function processResponse(response, loadingDialog) {
					var answer = response.responseXML.documentElement.getAttribute("answer");
					var variableValue = JSON.parse(answer);
					jslog("answer:"+answer);
					g_form.clearValue('multiple_project');
					g_form.clearOptions('blueprint');


					g_form.setMandatory('blueprint', false);
					g_form.setMandatory('type_of_blueprint', false);

					g_form.setReadOnly('blueprint', true);
					g_form.setReadOnly('type_of_blueprint', true);

					var project = variableValue['project'];
					var project_sys_ids = project.sys_ids.split(',');
					for(var i=0; i<project_sys_ids.length; i++){
						g_form.setValue('multiple_project', project_sys_ids[i]+'');
						jslog("Set Fields Value, set Project value as "+ project_sys_ids[i]);
					}

					var blueprint1 = variableValue['blueprint'];
					if( blueprint1['class']+'' == 'x_nuta2_nutanix_ca_runbooks' || blueprint1['class']+'' == 'x_nuta2_nutanix_ca_nutanix_marketplaceitems' && variableValue['type_of_blueprint']+'' == 'published_runbook'){
						g_form.clearOptions('runbook');
						g_form.setReadOnly('runbook', true);
						g_form.addOption('runbook', blueprint1.sys_id+'', blueprint1.name+'');
						jslog("Set Fields Value, set runbook value as "+ blueprint1.name);
					}else{
						g_form.addOption('blueprint', blueprint1.sys_id+'', blueprint1.name+'');
						jslog("Set Fields Value, set Blueprint value as "+ blueprint1.name);
					}


					var blueprintType = '';

					if( blueprint1['class']+'' == 'x_nuta2_nutanix_ca_nutanix_blueprint' )
						blueprintType = 'unpublished';
					if( blueprint1['class']+'' == 'x_nuta2_nutanix_ca_runbooks' )
						blueprintType = 'runbook';
					else
						blueprintType = 'published';

					g_form.setValue('type_of_blueprint', blueprintType);
					jslog("Set Fields Value, set type_of_blueprint value as "+blueprintType);

					g_form.setValue('cat_item', variableValue['item_name']+'');
					jslog("Set Fields Value, set cat_item value as "+variableValue['item_name']);

					if(performAction == 'update'){
						if(blueprintType+'' == 'unpublished' || blueprintType+'' == 'published'){
							//add
							g_form.clearValue('environments');

							var environments = variableValue['environments'];
							var sys_ids = environments.sys_ids.split(',');

							for(var i=0; i<sys_ids.length; i++){
								g_form.setValue('environments', sys_ids[i]+'');
								jslog("Set Fields Value, environment value as "+sys_ids[i]);
							}

							g_form.clearValue('multiple_application_profile');

							var application_profile = variableValue['application_profile'];
							var sys_ids = application_profile.sys_ids.split(',');

							for(var i=0; i<sys_ids.length; i++){
								g_form.setValue('multiple_application_profile', sys_ids[i]+'');
								jslog("Set Fields Value, application_profile value as "+sys_ids[i]);
							}
							
							g_form.clearValue('type_of_blueprint');
							var type_of_blueprint = variableValue['type_of_blueprint'];
							g_form.setValue('type_of_blueprint', type_of_blueprint+'');

						}
						if(blueprintType+'' == 'runbook' ){
							g_form.clearValue('runbook');

							var endpoint = variableValue['endpoint'];
							var sys_ids = endpoint.sys_ids.split(',');

							for(var i=0; i<sys_ids.length; i++){
								g_form.setValue('endpoint', sys_ids[i]+'');
								jslog("Set Fields Value, endpoint value as "+sys_ids[i]);
							}

							g_form.clearValue('multiple_application_profile');

							var application_profile = variableValue['application_profile'];
							var application_profile_sys_ids = application_profile.sys_ids.split(',');

							for(var i=0; i<application_profile_sys_ids.length; i++){
								g_form.setValue('multiple_application_profile', application_profile_sys_ids[i]+'');
								jslog("Set Fields Value, application_profile value as "+application_profile_sys_ids[i]);
							}
							//add
							var environments = variableValue['environments'];
							var sys_ids = environments.sys_ids.split(',');

							for(var i=0; i<sys_ids.length; i++){
								g_form.setValue('environments', sys_ids[i]+'');
								jslog("Set Fields Value, environment value as "+sys_ids[i]);
							}

							g_form.clearValue('type_of_blueprint');
							var type_of_blueprint = variableValue['type_of_blueprint'];
							g_form.setValue('type_of_blueprint', type_of_blueprint+'');
						}
					}

					new GlideModal().get("loader").destroy();
				}
			}

		}

		var data = getParameterValue('data');

		if(data){
			jslog("Set Fields Value "+data);
			data = JSON.parse(decodeURIComponent(data));

			g_form.setValue('type_of_blueprint', data.type);
			g_form.setValue('blueprint', data.blueprint);

			g_form.clearValue('multiple_project');
			g_form.clearValue('multiple_application_profile');
			g_form.clearValue('delta_profiles');
			g_form.clearValue('delta_project');
			g_form.setValue('delta_profiles', data.delta_profile);
			g_form.setValue('delta_profiles', data.delta_project);
			
		}

	}
	else{		
		var data = {
			"project": g_form.getValue('multiple_project'),
			"type": g_form.getValue('type_of_blueprint'),
			"blueprint": g_form.getValue('blueprint'),
			"blueprint_name": g_form.g_form.getDisplayValue('blueprint'),
			"profile": g_form.getValue('multiple_application_profile'),
			"delta_profile": g_form.getValue('delta_profiles'),
			"delta_project": g_form.getValue('delta_project'),
			"runbook": g_form.getValue('runbook'),
			"endpoint": g_form.getValue('endpoint'),
			"environments": g_form.getValue('environments')
		};

		self.location = g_form.getValue('url')+'&b&data='+JSON.stringify(data);
	}

}

function getParameterValue(name) {  
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");  
	var regexS = "[\\?&]" + name + "=([^&#]*)";  
	var regex = new RegExp(regexS);  
	var results = regex.exec(self.location);  
	if (results == null) {  
		return "";  
	} else {  
		return unescape(results[1]);  
	}  
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>girishgyani</sys_created_by>
        <sys_created_on>2018-11-09 11:39:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f0d855e337212300fdfc097973990e2b</sys_id>
        <sys_mod_count>142</sys_mod_count>
        <sys_name>Set Fields Value</sys_name>
        <sys_overrides/>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>catalog_script_client_f0d855e337212300fdfc097973990e2b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-12-06 08:57:01</sys_updated_on>
        <table/>
        <type>onLoad</type>
        <ui_type>0</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
