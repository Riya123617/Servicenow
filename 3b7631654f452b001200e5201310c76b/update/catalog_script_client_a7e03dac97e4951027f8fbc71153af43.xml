<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item/>
        <cat_variable>IO:8be0f9ac97e4951027f8fbc71153af43</cat_variable>
        <condition/>
        <description>This script is auto created thorugh runtime module for fetching and setting form data and visibility.</description>
        <field/>
        <global>true</global>
        <isolate_script>false</isolate_script>
        <messages/>
        <name>Fetch form data on change of profile</name>
        <order>100</order>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } try { var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { if (newValue == '') return; var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var flds = g_form.nameMap; for (var i in flds) { if (fldType[flds[i].realName + ''] + '' == 'formatter' || fldType[flds[i].realName + ''] + '' == 'container' || fldType[flds[i].realName + ''] + '' == 'checkbox_container' || fldType[flds[i].realName + ''] + '' == 'undefined') { continue; } if (flds[i].prettyName != 'default_app_name') { g_form.setMandatory(flds[i].prettyName, false); } g_form.setDisplay(flds[i].prettyName, false); } g_form.setVariablesReadOnly(true); g_form.setDisplay('provider_icons', false); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); g_form.setMandatory('default_profile', true); g_form.setDisplay('default_environment', true); g_form.setReadOnly('default_environment', false); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var fldType = {}; var elemen = g_form.elements; for (var i in elemen) { fldType[elemen[i].fieldName + ''] = elemen[i].type + ''; } var nameTypeMap = {}; var flds = g_form.nameMap; for (var i in flds) { nameTypeMap[flds[i].prettyName + ''] = fldType[flds[i].realName + ''] + ''; } var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (nameTypeMap[i + ''] + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + '', parsed[i].mandatory); } } else { g_form.setValue(i + '', parsed[i].value + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); if (parsed[i].mandatory) { g_form.setMandatory(i + '', parsed[i].mandatory); } } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); new GlideModal().get('loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var envUUID = (g_form.getValue('default_environment') + '').trim(); var projectUUID = (g_form.getValue('default_project') + '').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchCredentialsList'); ga.addParam('sysparm_catSysID', cat_sys_id); ga.addParam('sysparm_project', projectUUID); ga.addParam('sysparm_env', envUUID); ga.getXML(parseResponse); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var credArr = {}; var parsed = JSON.parse(answer); for (var i in parsed) { var credential = parsed[i]; var name = (credential.actual_name + '').toLowerCase().replace(/ /g, '_'); g_form.setValue(name + '_credential_name', credential.name + ''); g_form.setReadOnly(name + '_credential_name', true); g_form.setValue(name + '_secret_type', credential.type + '', (credential.type + '' == 'KEY') ? 'SSH Private Key' : 'Password'); g_form.setReadOnly(name + '_secret_type', true); g_form.setValue(name + '_username', credential.username.value); g_form.setReadOnly(name + '_username', credential.username.readOnly); g_form.setDisplay(name + '_username', !credential.username.readOnly); if ((credential.type == 'KEY')) { g_form.setValue(name + '_ssh_private_key', credential.ssh_private_key.value); g_form.setReadOnly(name + '_ssh_private_key', credential.ssh_private_key.readOnly); g_form.setValue(name + '_passphrase', credential.passphrase.value); g_form.setReadOnly(name + '_passphrase', credential.passphrase.readOnly); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_ssh_private_key', !credential.ssh_private_key.readOnly); g_form.setDisplay(name + '_passphrase', !credential.passphrase.readOnly); } else { g_form.setValue(name + '_password', ''); credArr[name + '_password'] = credential.password.value; g_form.setReadOnly(name + '_password', credential.password.readOnly); g_form.setDisplay(name + '_password', !credential.password.readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); } g_form.setDisplay(name + '_credential_reference', 'false'); if (credential.credential_reference && credential.credential_reference[0].name) { g_form.setDisplay(name + '_credential_reference', 'true'); for (var i = 0; i < credential.credential_reference.length; i++) { g_form.addOption(name + '_credential_reference', credential.credential_reference[i].uuid + '', credential.credential_reference[i].name + ''); } if (credential.credential_reference.length <= 1) { g_form.setReadOnly(name + '_credential_reference', 'true'); } else g_form.setReadOnly(name + '_credential_reference', 'false'); g_form.setDisplay(name + '_credential_reference', credential.credential_reference[0].readOnly); g_form.setDisplay(name + '_ssh_private_key', 'false'); g_form.setDisplay(name + '_passphrase', 'false'); g_form.setDisplay(name + '_password', 'false'); g_form.setDisplay(name + '_secret_type', 'false'); } } sessionStorage['credentials_' + g_form.getUniqueValue()] = JSON.stringify(credArr); new GlideModal().get('loader').destroy(); } } } else { var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'getFieldDetails'); ga.addParam('cat_item_sys_id', g_form.getUniqueValue()); ga.addParam('fieldNameArray', g_form.getFieldNames()); ga.getXML(parseFieldResponse); function parseFieldResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer); for (var i in object1) { if (object1[i].var_type == 'formatter' || object1[i].var_type == 'container' || object1[i].var_type == 'checkbox_container' || object1[i].var_type == 'undefined' || object1[i].var_type == 'Container Start') { continue; } if (object1[i].var_name != 'default_app_name') { g_form.setMandatory(object1[i].var_name + '', false); } if (object1[i].var_name != 'default_environment' && object1[i].var_name != 'default_project' && object1[i].var_name != 'default_profile') { g_form.setDisplay(object1[i].var_name + '', false); } } } g_form.setDisplay('provider_icons', 'true'); g_form.setReadOnly('default_project', false); g_form.setReadOnly('default_app_name', false); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_app_name', true); g_form.setDisplay('default_profile', true); g_form.setDisplay('default_environment', true); var profile = newValue; var cat_sys_id = g_form.getUniqueValue(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse, null); function parseResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchOrderFormData'); ga.addParam('sysparm_profile', profile); ga.addParam('sysparm_catSysID', cat_sys_id); ga.getXML(parseResponse1, null); function parseResponse1(response) { var answer1 = response.responseXML.documentElement.getAttribute('answer'); var object1 = JSON.parse(answer1); for (var i in object1) { var fielVal = {}; var parsed = JSON.parse(answer); for (var i in parsed) { if (i.indexOf('cluster_name') == -1) { if (object1[i].var_type + '' == 'masked') { fielVal[i] = parsed[i].value; g_form.setValue(i + '', ''); } else { g_form.setValue(i + '', parsed[i].value + ''); } g_form.setReadOnly(i + '', parsed[i].readOnly + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); if (parsed[i].mandatory) { g_form.setMandatory(i + '', parsed[i].mandatory); } } else { g_form.setValue(i + '', parsed[i].value + ''); g_form.setDisplay(i + '', !parsed[i].readOnly); g_form.setReadOnly(i + '', true); if (parsed[i].mandatory) { g_form.setMandatory(i + '', parsed[i].mandatory); } } } sessionStorage['fieldValues_' + g_form.getUniqueValue()] = JSON.stringify(fielVal); } } } } } } catch (e) { console.log('Inside onchange profile: ' + e.message); } }]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2022-07-04 09:55:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>a7e03dac97e4951027f8fbc71153af43</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Fetch form data on change of profile</sys_name>
        <sys_overrides/>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>catalog_script_client_a7e03dac97e4951027f8fbc71153af43</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2022-07-04 09:55:58</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
