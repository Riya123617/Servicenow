<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="test4">523e716497e8951027f8fbc71153af7c</cat_item>
        <cat_variable>IO:8f3eb16497e8951027f8fbc71153afcc</cat_variable>
        <condition/>
        <description>This script is auto created thorugh runtime module for getting variables on change of project.</description>
        <field/>
        <global>true</global>
        <isolate_script>false</isolate_script>
        <messages/>
        <name>On Change of Environment variable</name>
        <order>700</order>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading) { if (isLoading || newValue == '') { return; } var portal_check; var portalgr = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); portalgr.addParam('sysparm_name', 'getPortalCompatibility'); portalgr.getXMLAnswer(getPortalCheck); function getPortalCheck(response) { portal_check = response; if (portal_check == 'false') { var loadingHTML = "<div class='loading-container'><div class='loading-indicator icon-loading icon-lg'></div></div>"; var loadingDialog = new GlideModal('environment_loader', true); loadingDialog.setTitle('Fetching Profiles...'); loadingDialog.renderWithContent('' + loadingHTML); var def_project; var gUrl = new GlideURL(); gUrl.setFromCurrent(); for (var i = 0; i < g_form.getControl('default_project').options.length; i++) { if (g_form.getControl('default_project').options[i].value == g_form.getValue('default_project')) { def_project = g_form.getControl('default_project').options[i].innerText; break; } } var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment'); ga.addParam('sysparm_env', g_form.getValue('default_environment')); ga.addParam('sysparm_proValue', g_form.getValue('default_project')); ga.addParam('sysparm_sysID', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); jslog(' On Change of Environment variable answer' + answer); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile'); g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.'); var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + '' == 'container' || elemen[i].type + '' == 'checkbox_container') continue; g_form.setDisplay(elemen[i].fieldName, false); } g_form.setDisplay('default_profile', true); g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true); g_form.setMandatory('default_profile', true); } else { var elemen = g_form.elements; for (var i in elemen) { if (elemen[i].type + '' == 'container' || elemen[i].type + '' == 'checkbox_container') continue; g_form.setDisplay(elemen[i].fieldName, true); } g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile'); for (var i = 0; i < answer.length; i++) { g_form.addOption('default_profile', answer[i], answer[i]); } if (answer.length == 1) { g_form.setReadOnly('default_profile', true); } } new GlideModal().get('environment_loader').destroy(); new GlideModal().get('environment_loader').destroy(); new GlideModal().get('environment_loader').destroy(); var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.addParam('sysparm_profile_sysid', g_form.getValue('default_profile')); gajax.addParam('sysparm_envsysid', g_form.getValue('default_environment')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } } } } else { var def_project; var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchProfilesBasisOnEnvironment'); ga.addParam('sysparm_env', g_form.getValue('default_environment')); ga.addParam('sysparm_proValue', g_form.getValue('default_project')); ga.addParam('sysparm_sysID', g_form.getUniqueValue()); ga.getXML(parseData); function parseData(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); answer = JSON.parse(answer); if (answer.length == 0) { g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile'); g_form.showFieldMsg('default_profile', 'There are no applicable Profile(s) that match the selected Environment. Please choose a different Environment to proceed.'); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.setDisplay('default_profile', true); g_form.setReadOnly('default_profile', false); g_form.setDisplay('default_project', true); g_form.setDisplay('default_environment', true); g_form.setMandatory('default_profile', true); } else { g_form.setReadOnly('default_profile', false); var elemen = g_form.getFieldNames(); for (var i in elemen) { if (elemen[i] + '' === 'default_profile' || elemen[i] + '' === 'default_project' || elemen[i] + '' === 'default_environment' || elemen[i] + '' === 'default_app_name') g_form.setDisplay(elemen[i], true); else { g_form.setMandatory(elemen[i], false); g_form.setDisplay(elemen[i], false); } } g_form.hideFieldMsg('default_profile', true); g_form.clearOptions('default_profile'); g_form.clearValue('default_profile'); for (var i = 0; i < answer.length; i++) { g_form.addOption('default_profile', answer[i], answer[i]); } g_form.setValue('default_profile', answer[0]); if (answer.length == 1) { g_form.setReadOnly('default_profile', true); } } var cat_sys_id = g_form.getUniqueValue(); var profile = g_form.getValue('default_profile').trim(); var ga = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); ga.addParam('sysparm_name', 'fetchLaunchVars'); ga.addParam('sysparm_catsysid', cat_sys_id); ga.addParam('sysparm_profile', profile); ga.getXML(varResponse); } function varResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); var varJSON = JSON.parse(answer); var prof_json = varJSON.profile; var serv_json = varJSON.service; var sess_json = {}; var var_array = []; for (var i in prof_json) { var field = prof_json[i]; var curr_value = g_form.getValue('IO:' + i); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = i + ''; sess_json['IO:' + i] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); for (var j in serv_json) { var_array = []; for (var k in serv_json[j]) { var field = serv_json[j][k]; var curr_value = g_form.getValue('IO:' + k); var parsed_field = JSON.parse(field); parsed_field.value = curr_value; parsed_field.sys_id = k + ''; sess_json['IO:' + k] = curr_value; var_array.push(parsed_field); } getAdvancedVars(var_array); } sessionStorage['varValues'] = JSON.stringify(sess_json); } function getAdvancedVars(variable_json) { var act_var_JSON = JSON.stringify(variable_json); var gajax = new GlideAjax('x_nuta2_nutanix_ca.Nutanix_ClientServerScriptBridge'); gajax.addParam('sysparm_name', 'variableArrayParser'); gajax.addParam('sysparm_type', 'catalog'); gajax.addParam('sysparm_parentUuid', g_form.getUniqueValue() + ''); gajax.addParam('sysparm_varJson', act_var_JSON); gajax.addParam('sysparm_profile_sysid', g_form.getValue('default_profile')); gajax.addParam('sysparm_envsysid', g_form.getValue('default_environment')); gajax.getXML(getVarResponse); } function getVarResponse(response) { var answer = response.responseXML.documentElement.getAttribute('answer'); if (answer + '' == '' || answer + '' == 'undefined' || answer + '' == 'null') return; var parsedResponse = JSON.parse(answer); for (var i in parsedResponse) { var row = parsedResponse[i]; var sys_id = 'IO:' + row.sys_id; var type = row.type + ''; if (row.state == 'SUCCESS') { if (type == 'LOCAL') g_form.setValue(sys_id, row.value); if (type == 'EXEC_LOCAL' || type == 'HTTP_LOCAL' || type == 'EXEC_SECRET' || type == 'HTTP_SECRET') { g_form.clearOptions(sys_id); for (var k = 0; k < (row.value).length; k++) { g_form.addOption(sys_id + '', row.value[k], row.value[k]); } } } if (row.state == 'ERROR') { g_form.addErrorMessage('Error in variable: ' + row.name + ': ' + row.error[0]); } } } function getParameterValue(name) { name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]"); var regexS = "[\\?&]" + name + "=([^&#]*)"; var regex = new RegExp(regexS); var results = regex.exec(self.location); if (results == null) { return ""; } else { return unescape(results[1]); } } } } }]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2022-07-04 10:54:15</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>514ef56497e8951027f8fbc71153af37</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>On Change of Environment variable</sys_name>
        <sys_overrides/>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>catalog_script_client_514ef56497e8951027f8fbc71153af37</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2022-07-04 10:54:16</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
